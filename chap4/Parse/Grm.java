
//----------------------------------------------------
// The following code was generated by CUP v0.10g
// Wed Mar 05 14:49:13 CST 2025
//----------------------------------------------------

package Parse;

import java.util.ArrayList;

public class Grm extends java_cup.runtime.lr_parser {

  /** constructor */
  public Grm() {super();}

  /** production table */
  protected static final short _production_table[][] = {
        {0, 2},     {33, 2},     {33, 1},     {34, 6},     {34, 6}, 
        {34, 6},     {34, 4},     {34, 4},     {34, 5},     {35, 1}, 
        {36, 0},     {36, 2},     {37, 1},     {37, 1},     {37, 1}, 
        {37, 1},     {37, 1},     {37, 1},     {38, 1},     {38, 2}, 
        {39, 2},     {40, 1},     {40, 2},     {31, 3},     {41, 2}, 
        {41, 1},     {42, 1},     {42, 1},     {42, 2},     {43, 1}, 
        {43, 1},     {44, 1},     {44, 2},     {45, 1},     {45, 1}, 
        {45, 1},     {45, 1},     {45, 1},     {45, 1},     {45, 1}, 
        {45, 2},     {45, 1},     {46, 2},     {47, 3},     {32, 1}, 
        {32, 3},     {29, 1},     {29, 3},     {30, 3},     {30, 4}, 
        {48, 1},     {48, 1},     {49, 3},     {49, 5},     {49, 2}, 
        {50, 3},     {50, 5},     {50, 2},     {51, 2},     {51, 4}, 
        {52, 1},     {52, 3},     {53, 1},     {53, 3},     {54, 1}, 
        {54, 3},     {2, 1},     {2, 1},     {2, 1},     {2, 3}, 
        {4, 1},     {4, 4},     {4, 4},     {4, 3},     {4, 2}, 
        {4, 2},     {4, 3},     {4, 3},     {24, 1},     {24, 3}, 
        {6, 1},     {6, 2},     {6, 2},     {6, 2},     {6, 2}, 
        {6, 2},     {6, 2},     {6, 4},     {5, 1},     {7, 1}, 
        {7, 3},     {7, 3},     {7, 3},     {8, 1},     {8, 3}, 
        {8, 3},     {9, 1},     {9, 3},     {9, 3},     {10, 1}, 
        {10, 3},     {10, 3},     {10, 3},     {10, 3},     {11, 1}, 
        {11, 3},     {11, 3},     {12, 1},     {12, 3},     {13, 1}, 
        {13, 3},     {14, 1},     {14, 3},     {15, 1},     {15, 3}, 
        {16, 1},     {16, 3},     {26, 1},     {27, 1},     {3, 1}, 
        {3, 3},     {3, 3},     {3, 3},     {3, 3},     {3, 3}, 
        {3, 3},     {3, 3},     {3, 3},     {3, 3},     {3, 3}, 
        {3, 3},     {17, 1},     {17, 3},     {28, 1},     {1, 1}, 
        {1, 1},     {1, 1},     {1, 1},     {1, 1},     {1, 1}, 
        {25, 3},     {18, 4},     {18, 3},     {18, 3},     {18, 2}, 
        {23, 1},     {23, 2},     {19, 2},     {19, 1},     {20, 5}, 
        {20, 7},     {21, 5},     {21, 7},     {21, 9},     {21, 8}, 
        {21, 7},     {21, 6},     {21, 8},     {21, 8},     {22, 3}, 
        {22, 2},     {22, 2},     {22, 3},     {22, 2}  };

  /** access to production table */
  public short[][] production_table() {return _production_table;}

  /** parse action table */
  protected static final short[][] _action_table = {
    /*0*/{35,5,36,7,37,10,39,6,41,8,43,3,46,9,51,15,55,2,57,14,-1,-11},
    /*1*/{2,299,-1,0},
    /*2*/{-1,-16},
    /*3*/{-1,-3},
    /*4*/{37,10,39,6,43,3,46,9,51,15,57,14,-1,-11},
    /*5*/{-1,-18},
    /*6*/{37,10,39,6,43,3,46,9,51,15,57,14,-1,-11},
    /*7*/{2,30,6,24,47,29,49,32,50,33,52,27,53,26,55,23,56,34,-1,0},
    /*8*/{-1,-15},
    /*9*/{-1,-14},
    /*10*/{0,179,35,5,36,7,37,10,39,6,41,8,43,3,46,9,51,15,55,2,57,14,-1,-11},
    /*11*/{37,10,39,6,43,3,46,9,51,15,57,14,-1,-11},
    /*12*/{42,17,48,18,-1,0},
    /*13*/{-1,-17},
    /*14*/{-1,-13},
    /*15*/{2,19,-1,0},
    /*16*/{-1,-51},
    /*17*/{-1,-52},
    /*18*/{-1,-10},
    /*19*/{14,21,-1,0},
    /*20*/{2,30,6,24,47,29,49,32,50,33,52,27,53,26,55,23,56,34,-1,0},
    /*21*/{-1,-8},
    /*22*/{2,176,-1,0},
    /*23*/{-1,-37},
    /*24*/{12,49,18,48,-1,-26},
    /*25*/{-1,-38},
    /*26*/{-1,-34},
    /*27*/{2,30,6,24,15,38,47,29,49,32,50,33,52,27,53,26,55,23,56,34,-1,0},
    /*28*/{-1,-40},
    /*29*/{-1,-42},
    /*30*/{2,19,-1,0},
    /*31*/{-1,-36},
    /*32*/{-1,-39},
    /*33*/{-1,-35},
    /*34*/{9,36,-1,0},
    /*35*/{-1,-49},
    /*36*/{2,19,-1,0},
    /*37*/{-1,-44},
    /*38*/{9,40,-1,0},
    /*39*/{-1,-50},
    /*40*/{-1,-19},
    /*41*/{12,49,18,175,-1,-27},
    /*42*/{-1,-22},
    /*43*/{-1,-25},
    /*44*/{-1,-28},
    /*45*/{12,173,-1,-31},
    /*46*/{12,170,-1,-30},
    /*47*/{-1,-32},
    /*48*/{1,75,2,64,4,56,10,61,13,50,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*49*/{-1,-21},
    /*50*/{10,167,-1,0},
    /*51*/{-1,-71},
    /*52*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*53*/{-1,-68},
    /*54*/{-1,-90},
    /*55*/{-1,-69},
    /*56*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*57*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*58*/{-1,-89},
    /*59*/{76,161,78,160,-1,-110},
    /*60*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*61*/{-1,-119},
    /*62*/{63,103,64,102,-1,-100},
    /*63*/{-1,-134},
    /*64*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*65*/{10,118,12,115,66,117,68,114,70,116,77,119,-1,-81},
    /*66*/{-1,-112},
    /*67*/{75,90,-1,-114},
    /*68*/{16,105,17,106,-1,-97},
    /*69*/{22,97,23,99,24,98,25,100,-1,-105},
    /*70*/{20,94,21,95,-1,-108},
    /*71*/{26,88,-1,-116},
    /*72*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*73*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*74*/{-1,-67},
    /*75*/{27,86,-1,-118},
    /*76*/{18,82,19,80,79,81,-1,-94},
    /*77*/{13,79,-1,0},
    /*78*/{-1,-24},
    /*79*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*80*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*81*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*82*/{-1,-91},
    /*83*/{-1,-93},
    /*84*/{-1,-92},
    /*85*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*86*/{26,88,-1,-117},
    /*87*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*88*/{75,90,-1,-115},
    /*89*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*90*/{-1,-113},
    /*91*/{-1,-85},
    /*92*/{-1,-82},
    /*93*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*94*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*95*/{22,97,23,99,24,98,25,100,-1,-107},
    /*96*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*97*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*98*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*99*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*100*/{63,103,64,102,-1,-101},
    /*101*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*102*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*103*/{16,105,17,106,-1,-98},
    /*104*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*105*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*106*/{18,82,19,80,79,81,-1,-96},
    /*107*/{18,82,19,80,79,81,-1,-95},
    /*108*/{16,105,17,106,-1,-99},
    /*109*/{63,103,64,102,-1,-103},
    /*110*/{63,103,64,102,-1,-102},
    /*111*/{63,103,64,102,-1,-104},
    /*112*/{22,97,23,99,24,98,25,100,-1,-106},
    /*113*/{-1,-76},
    /*114*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*115*/{-1,-75},
    /*116*/{2,64,-1,0},
    /*117*/{1,75,2,64,4,56,10,61,11,121,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*118*/{2,64,-1,0},
    /*119*/{-1,-77},
    /*120*/{-1,-74},
    /*121*/{-1,-79},
    /*122*/{28,136,58,137,59,133,61,131,62,135,65,138,67,132,69,134,71,129,72,130,73,139,-1,-89},
    /*123*/{-1,-120},
    /*124*/{7,126,11,127,-1,0},
    /*125*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*126*/{-1,-73},
    /*127*/{-1,-80},
    /*128*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*129*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*130*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*131*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*132*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*133*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*134*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*135*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*136*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*137*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*138*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*139*/{-1,-126},
    /*140*/{-1,-124},
    /*141*/{-1,-131},
    /*142*/{-1,-121},
    /*143*/{-1,-129},
    /*144*/{-1,-122},
    /*145*/{-1,-130},
    /*146*/{-1,-123},
    /*147*/{-1,-128},
    /*148*/{-1,-127},
    /*149*/{-1,-125},
    /*150*/{-1,-78},
    /*151*/{-1,-132},
    /*152*/{7,154,13,155,-1,0},
    /*153*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*154*/{-1,-72},
    /*155*/{-1,-133},
    /*156*/{-1,-86},
    /*157*/{7,154,11,159,-1,0},
    /*158*/{-1,-70},
    /*159*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*160*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*161*/{20,94,21,95,-1,-111},
    /*162*/{20,94,21,95,-1,-109},
    /*163*/{-1,-83},
    /*164*/{-1,-87},
    /*165*/{-1,-84},
    /*166*/{2,30,6,24,47,29,49,32,50,33,52,27,53,26,55,23,56,34,-1,0},
    /*167*/{11,169,-1,0},
    /*168*/{-1,-88},
    /*169*/{13,50,-1,0},
    /*170*/{-1,-20},
    /*171*/{-1,-23},
    /*172*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*173*/{-1,-29},
    /*174*/{-1,-33},
    /*175*/{-1,-41},
    /*176*/{-1,-12},
    /*177*/{-1,-2},
    /*178*/{-1,-1},
    /*179*/{2,19,-1,0},
    /*180*/{9,182,-1,0},
    /*181*/{-1,-7},
    /*182*/{2,30,6,24,47,29,49,32,50,33,52,27,53,26,55,23,56,34,-1,0},
    /*183*/{2,19,-1,0},
    /*184*/{28,187,-1,0},
    /*185*/{9,196,-1,0},
    /*186*/{1,75,2,64,4,56,10,61,14,189,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*187*/{-1,-65},
    /*188*/{1,75,2,64,4,56,10,61,14,189,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*189*/{-1,-43},
    /*190*/{7,193,15,194,-1,0},
    /*191*/{-1,-63},
    /*192*/{1,75,2,64,4,56,10,61,14,189,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*193*/{-1,-66},
    /*194*/{-1,-64},
    /*195*/{-1,-4},
    /*196*/{2,30,6,24,47,29,49,32,50,33,52,27,53,26,55,23,56,34,-1,0},
    /*197*/{2,19,-1,0},
    /*198*/{10,202,-1,0},
    /*199*/{9,298,-1,0},
    /*200*/{14,219,-1,0},
    /*201*/{2,30,6,24,11,204,47,29,49,32,50,33,52,27,53,26,55,23,56,34,-1,0},
    /*202*/{2,19,-1,-61},
    /*203*/{14,-58,-1,-55},
    /*204*/{7,213,11,214,-1,0},
    /*205*/{7,207,11,208,-1,0},
    /*206*/{2,30,6,24,47,29,49,32,50,33,52,27,53,26,55,23,56,34,60,210,-1,0},
    /*207*/{-1,-56},
    /*208*/{2,19,-1,0},
    /*209*/{11,211,-1,0},
    /*210*/{-1,-57},
    /*211*/{-1,-60},
    /*212*/{2,30,6,24,47,29,49,32,50,33,52,27,53,26,55,23,56,34,60,216,-1,0},
    /*213*/{-1,-53},
    /*214*/{-1,-62},
    /*215*/{11,217,-1,0},
    /*216*/{-1,-54},
    /*217*/{-1,-59},
    /*218*/{1,75,2,64,4,56,9,228,10,61,14,219,15,237,16,53,17,74,29,229,31,236,32,227,33,240,34,234,35,5,36,7,37,10,38,57,39,6,40,225,41,8,43,3,44,51,45,232,46,9,51,15,54,235,55,2,57,14,68,58,70,73,74,65,-1,-11},
    /*219*/{-1,-5},
    /*220*/{1,75,2,64,4,56,9,228,10,61,14,219,15,295,16,53,17,74,29,229,31,236,32,227,33,240,34,234,35,5,36,7,37,10,38,57,39,6,40,225,41,8,43,3,44,51,45,232,46,9,51,15,54,235,55,2,57,14,68,58,70,73,74,65,-1,-11},
    /*221*/{-1,-139},
    /*222*/{-1,-140},
    /*223*/{8,293,-1,-68},
    /*224*/{9,292,-1,0},
    /*225*/{-1,-136},
    /*226*/{10,267,-1,0},
    /*227*/{-1,-149},
    /*228*/{10,261,-1,0},
    /*229*/{7,154,9,260,-1,0},
    /*230*/{-1,-146},
    /*231*/{1,75,2,64,4,56,9,257,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*232*/{-1,-138},
    /*233*/{9,256,-1,0},
    /*234*/{2,64,-1,0},
    /*235*/{10,250,-1,0},
    /*236*/{-1,-145},
    /*237*/{-1,-137},
    /*238*/{-1,-135},
    /*239*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*240*/{1,75,2,64,4,56,9,228,10,61,14,219,15,243,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*241*/{-1,-147},
    /*242*/{-1,-143},
    /*243*/{31,245,-1,0},
    /*244*/{10,246,-1,0},
    /*245*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*246*/{7,154,11,248,-1,0},
    /*247*/{9,249,-1,0},
    /*248*/{-1,-153},
    /*249*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*250*/{7,154,11,252,-1,0},
    /*251*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*252*/{-1,-152},
    /*253*/{9,255,-1,0},
    /*254*/{-1,-160},
    /*255*/{-1,-162},
    /*256*/{-1,-164},
    /*257*/{7,154,9,259,-1,0},
    /*258*/{-1,-163},
    /*259*/{-1,-148},
    /*260*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*261*/{7,154,11,263,-1,0},
    /*262*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*263*/{30,265,-1,-150},
    /*264*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*265*/{-1,-151},
    /*266*/{1,75,2,64,4,56,9,268,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*267*/{1,75,2,64,4,56,9,282,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*268*/{7,154,9,270,-1,0},
    /*269*/{1,75,2,64,4,56,9,271,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*270*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*271*/{7,154,9,273,-1,0},
    /*272*/{1,75,2,64,4,56,10,61,11,274,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*273*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*274*/{7,154,11,276,-1,0},
    /*275*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*276*/{-1,-154},
    /*277*/{-1,-155},
    /*278*/{7,154,11,280,-1,0},
    /*279*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*280*/{-1,-158},
    /*281*/{11,290,-1,0},
    /*282*/{7,154,9,284,-1,0},
    /*283*/{1,75,2,64,4,56,10,61,11,285,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*284*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*285*/{7,154,11,287,-1,0},
    /*286*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*287*/{-1,-159},
    /*288*/{-1,-156},
    /*289*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*290*/{-1,-157},
    /*291*/{-1,-161},
    /*292*/{1,75,2,64,4,56,9,228,10,61,14,219,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*293*/{-1,-141},
    /*294*/{-1,-144},
    /*295*/{1,75,2,64,4,56,9,228,10,61,14,219,15,297,16,53,17,74,29,229,31,236,32,227,33,240,34,234,38,57,40,225,44,51,45,232,54,235,68,58,70,73,74,65,-1,0},
    /*296*/{-1,-142},
    /*297*/{-1,-6},
    /*298*/{14,300,-1,0},
    /*299*/{2,301,-1,0},
    /*300*/{28,307,-1,-47},
    /*301*/{7,304,15,305,-1,0},
    /*302*/{-1,-45},
    /*303*/{2,301,-1,0},
    /*304*/{-1,-9},
    /*305*/{-1,-46},
    /*306*/{1,75,2,64,4,56,10,61,16,53,17,74,38,57,44,51,68,58,70,73,74,65,-1,0},
    /*307*/{-1,-48},
  };

  /** access to parse action table */
  public short[][] action_table() {return _action_table;}

  /** reduce_goto table */
  protected static final short[][] _reduce_table = {
    /*0*/{33,10,34,3,36,12,37,11,-1,-1},
    /*1*/{-1,-1},
    /*2*/{-1,-1},
    /*3*/{-1,-1},
    /*4*/{36,196,37,11,-1,-1},
    /*5*/{-1,-1},
    /*6*/{36,182,37,11,-1,-1},
    /*7*/{41,179,45,24,-1,-1},
    /*8*/{-1,-1},
    /*9*/{-1,-1},
    /*10*/{34,177,36,12,37,11,-1,-1},
    /*11*/{36,176,37,11,-1,-1},
    /*12*/{48,15,-1,-1},
    /*13*/{-1,-1},
    /*14*/{-1,-1},
    /*15*/{35,19,-1,-1},
    /*16*/{-1,-1},
    /*17*/{-1,-1},
    /*18*/{-1,-1},
    /*19*/{47,21,-1,-1},
    /*20*/{30,27,41,30,45,24,-1,-1},
    /*21*/{-1,-1},
    /*22*/{-1,-1},
    /*23*/{-1,-1},
    /*24*/{31,42,38,46,39,40,40,45,42,43,43,44,44,41,-1,-1},
    /*25*/{-1,-1},
    /*26*/{-1,-1},
    /*27*/{41,36,45,24,-1,-1},
    /*28*/{-1,-1},
    /*29*/{-1,-1},
    /*30*/{35,34,-1,-1},
    /*31*/{-1,-1},
    /*32*/{-1,-1},
    /*33*/{-1,-1},
    /*34*/{-1,-1},
    /*35*/{-1,-1},
    /*36*/{35,38,-1,-1},
    /*37*/{-1,-1},
    /*38*/{-1,-1},
    /*39*/{-1,-1},
    /*40*/{-1,-1},
    /*41*/{31,42,38,46,39,40,40,45,43,173,-1,-1},
    /*42*/{-1,-1},
    /*43*/{-1,-1},
    /*44*/{-1,-1},
    /*45*/{31,171,-1,-1},
    /*46*/{39,170,-1,-1},
    /*47*/{-1,-1},
    /*48*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,61,27,77,28,53,-1,-1},
    /*49*/{-1,-1},
    /*50*/{-1,-1},
    /*51*/{-1,-1},
    /*52*/{2,51,4,65,5,165,6,58,28,53,-1,-1},
    /*53*/{-1,-1},
    /*54*/{-1,-1},
    /*55*/{-1,-1},
    /*56*/{2,51,4,65,5,164,6,58,28,53,-1,-1},
    /*57*/{2,51,4,65,6,163,28,53,-1,-1},
    /*58*/{-1,-1},
    /*59*/{-1,-1},
    /*60*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,157,26,123,28,53,-1,-1},
    /*61*/{-1,-1},
    /*62*/{-1,-1},
    /*63*/{-1,-1},
    /*64*/{2,51,4,65,5,156,6,58,28,53,-1,-1},
    /*65*/{-1,-1},
    /*66*/{-1,-1},
    /*67*/{-1,-1},
    /*68*/{-1,-1},
    /*69*/{-1,-1},
    /*70*/{-1,-1},
    /*71*/{-1,-1},
    /*72*/{2,51,4,65,6,92,28,53,-1,-1},
    /*73*/{2,51,4,65,5,91,6,58,28,53,-1,-1},
    /*74*/{-1,-1},
    /*75*/{-1,-1},
    /*76*/{-1,-1},
    /*77*/{-1,-1},
    /*78*/{-1,-1},
    /*79*/{2,51,4,65,5,84,6,58,28,53,-1,-1},
    /*80*/{2,51,4,65,5,83,6,58,28,53,-1,-1},
    /*81*/{2,51,4,65,5,82,6,58,28,53,-1,-1},
    /*82*/{-1,-1},
    /*83*/{-1,-1},
    /*84*/{-1,-1},
    /*85*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,86,28,53,-1,-1},
    /*86*/{-1,-1},
    /*87*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,88,28,53,-1,-1},
    /*88*/{-1,-1},
    /*89*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,70,12,59,13,90,28,53,-1,-1},
    /*90*/{-1,-1},
    /*91*/{-1,-1},
    /*92*/{-1,-1},
    /*93*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,112,28,53,-1,-1},
    /*94*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,95,28,53,-1,-1},
    /*95*/{-1,-1},
    /*96*/{2,51,4,65,5,54,6,58,7,76,8,68,9,111,28,53,-1,-1},
    /*97*/{2,51,4,65,5,54,6,58,7,76,8,68,9,110,28,53,-1,-1},
    /*98*/{2,51,4,65,5,54,6,58,7,76,8,68,9,109,28,53,-1,-1},
    /*99*/{2,51,4,65,5,54,6,58,7,76,8,68,9,100,28,53,-1,-1},
    /*100*/{-1,-1},
    /*101*/{2,51,4,65,5,54,6,58,7,76,8,108,28,53,-1,-1},
    /*102*/{2,51,4,65,5,54,6,58,7,76,8,103,28,53,-1,-1},
    /*103*/{-1,-1},
    /*104*/{2,51,4,65,5,54,6,58,7,107,28,53,-1,-1},
    /*105*/{2,51,4,65,5,54,6,58,7,106,28,53,-1,-1},
    /*106*/{-1,-1},
    /*107*/{-1,-1},
    /*108*/{-1,-1},
    /*109*/{-1,-1},
    /*110*/{-1,-1},
    /*111*/{-1,-1},
    /*112*/{-1,-1},
    /*113*/{-1,-1},
    /*114*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,152,26,123,28,53,-1,-1},
    /*115*/{-1,-1},
    /*116*/{28,150,-1,-1},
    /*117*/{2,51,3,121,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,24,124,26,123,28,53,-1,-1},
    /*118*/{28,119,-1,-1},
    /*119*/{-1,-1},
    /*120*/{-1,-1},
    /*121*/{-1,-1},
    /*122*/{-1,-1},
    /*123*/{-1,-1},
    /*124*/{-1,-1},
    /*125*/{2,51,3,127,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*126*/{-1,-1},
    /*127*/{-1,-1},
    /*128*/{2,51,3,149,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*129*/{2,51,3,148,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*130*/{2,51,3,147,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*131*/{2,51,3,146,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*132*/{2,51,3,145,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*133*/{2,51,3,144,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*134*/{2,51,3,143,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*135*/{2,51,3,142,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*136*/{2,51,3,141,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*137*/{2,51,3,140,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*138*/{2,51,3,139,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*139*/{-1,-1},
    /*140*/{-1,-1},
    /*141*/{-1,-1},
    /*142*/{-1,-1},
    /*143*/{-1,-1},
    /*144*/{-1,-1},
    /*145*/{-1,-1},
    /*146*/{-1,-1},
    /*147*/{-1,-1},
    /*148*/{-1,-1},
    /*149*/{-1,-1},
    /*150*/{-1,-1},
    /*151*/{-1,-1},
    /*152*/{-1,-1},
    /*153*/{2,51,3,155,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,-1,-1},
    /*154*/{-1,-1},
    /*155*/{-1,-1},
    /*156*/{-1,-1},
    /*157*/{-1,-1},
    /*158*/{-1,-1},
    /*159*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,162,28,53,-1,-1},
    /*160*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,161,28,53,-1,-1},
    /*161*/{-1,-1},
    /*162*/{-1,-1},
    /*163*/{-1,-1},
    /*164*/{-1,-1},
    /*165*/{-1,-1},
    /*166*/{45,167,-1,-1},
    /*167*/{-1,-1},
    /*168*/{-1,-1},
    /*169*/{-1,-1},
    /*170*/{-1,-1},
    /*171*/{-1,-1},
    /*172*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,61,27,77,28,53,-1,-1},
    /*173*/{-1,-1},
    /*174*/{-1,-1},
    /*175*/{-1,-1},
    /*176*/{-1,-1},
    /*177*/{-1,-1},
    /*178*/{-1,-1},
    /*179*/{35,180,-1,-1},
    /*180*/{-1,-1},
    /*181*/{-1,-1},
    /*182*/{41,183,45,24,-1,-1},
    /*183*/{35,184,-1,-1},
    /*184*/{46,185,-1,-1},
    /*185*/{-1,-1},
    /*186*/{2,51,3,187,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,54,189,-1,-1},
    /*187*/{-1,-1},
    /*188*/{2,51,3,187,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,53,190,54,191,-1,-1},
    /*189*/{-1,-1},
    /*190*/{-1,-1},
    /*191*/{-1,-1},
    /*192*/{2,51,3,187,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,123,28,53,54,194,-1,-1},
    /*193*/{-1,-1},
    /*194*/{-1,-1},
    /*195*/{-1,-1},
    /*196*/{41,197,45,24,-1,-1},
    /*197*/{35,198,-1,-1},
    /*198*/{49,199,50,200,-1,-1},
    /*199*/{-1,-1},
    /*200*/{18,219,-1,-1},
    /*201*/{41,202,45,24,51,205,52,204,-1,-1},
    /*202*/{35,217,-1,-1},
    /*203*/{-1,-1},
    /*204*/{-1,-1},
    /*205*/{-1,-1},
    /*206*/{41,208,45,24,-1,-1},
    /*207*/{-1,-1},
    /*208*/{35,211,-1,-1},
    /*209*/{-1,-1},
    /*210*/{-1,-1},
    /*211*/{-1,-1},
    /*212*/{41,214,45,24,-1,-1},
    /*213*/{-1,-1},
    /*214*/{-1,-1},
    /*215*/{-1,-1},
    /*216*/{-1,-1},
    /*217*/{-1,-1},
    /*218*/{1,230,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,23,240,25,238,26,123,28,223,33,220,34,3,36,12,37,11,-1,-1},
    /*219*/{-1,-1},
    /*220*/{1,230,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,23,295,25,238,26,123,28,223,34,177,36,12,37,11,-1,-1},
    /*221*/{-1,-1},
    /*222*/{-1,-1},
    /*223*/{-1,-1},
    /*224*/{-1,-1},
    /*225*/{-1,-1},
    /*226*/{-1,-1},
    /*227*/{-1,-1},
    /*228*/{-1,-1},
    /*229*/{-1,-1},
    /*230*/{-1,-1},
    /*231*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,257,26,123,28,53,-1,-1},
    /*232*/{-1,-1},
    /*233*/{-1,-1},
    /*234*/{28,253,-1,-1},
    /*235*/{-1,-1},
    /*236*/{-1,-1},
    /*237*/{-1,-1},
    /*238*/{-1,-1},
    /*239*/{1,243,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*240*/{1,241,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*241*/{-1,-1},
    /*242*/{-1,-1},
    /*243*/{-1,-1},
    /*244*/{-1,-1},
    /*245*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,246,26,123,28,53,-1,-1},
    /*246*/{-1,-1},
    /*247*/{-1,-1},
    /*248*/{-1,-1},
    /*249*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,250,26,123,28,53,-1,-1},
    /*250*/{-1,-1},
    /*251*/{1,252,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*252*/{-1,-1},
    /*253*/{-1,-1},
    /*254*/{-1,-1},
    /*255*/{-1,-1},
    /*256*/{-1,-1},
    /*257*/{-1,-1},
    /*258*/{-1,-1},
    /*259*/{-1,-1},
    /*260*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,261,26,123,28,53,-1,-1},
    /*261*/{-1,-1},
    /*262*/{1,263,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*263*/{-1,-1},
    /*264*/{1,265,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*265*/{-1,-1},
    /*266*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,268,26,123,28,53,-1,-1},
    /*267*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,282,26,123,28,53,-1,-1},
    /*268*/{-1,-1},
    /*269*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,271,26,123,28,53,-1,-1},
    /*270*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,278,26,123,28,53,-1,-1},
    /*271*/{-1,-1},
    /*272*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,274,26,123,28,53,-1,-1},
    /*273*/{1,277,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*274*/{-1,-1},
    /*275*/{1,276,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*276*/{-1,-1},
    /*277*/{-1,-1},
    /*278*/{-1,-1},
    /*279*/{1,280,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*280*/{-1,-1},
    /*281*/{-1,-1},
    /*282*/{-1,-1},
    /*283*/{2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,285,26,123,28,53,-1,-1},
    /*284*/{1,288,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*285*/{-1,-1},
    /*286*/{1,287,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*287*/{-1,-1},
    /*288*/{-1,-1},
    /*289*/{1,290,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*290*/{-1,-1},
    /*291*/{-1,-1},
    /*292*/{1,293,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*293*/{-1,-1},
    /*294*/{-1,-1},
    /*295*/{1,241,2,51,3,151,4,65,5,54,6,122,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,17,229,18,225,19,237,20,232,21,221,22,222,25,238,26,123,28,223,-1,-1},
    /*296*/{-1,-1},
    /*297*/{-1,-1},
    /*298*/{-1,-1},
    /*299*/{29,302,32,301,-1,-1},
    /*300*/{-1,-1},
    /*301*/{-1,-1},
    /*302*/{-1,-1},
    /*303*/{29,305,-1,-1},
    /*304*/{-1,-1},
    /*305*/{-1,-1},
    /*306*/{2,51,4,65,5,54,6,58,7,76,8,68,9,62,10,69,11,70,12,59,13,66,14,67,15,71,16,75,26,61,27,307,28,53,-1,-1},
    /*307*/{-1,-1},
  };

  /** access to reduce_goto table */
  public short[][] reduce_table() {return _reduce_table;}

  /** instance of action encapsulation class */
  protected CUP$Grm$actions action_obj;

  /** action encapsulation object initializer */
  protected void init_actions()
    {
      action_obj = new CUP$Grm$actions();
    }

  /** invoke a user supplied parse action */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Grm$do_action(act_num, parser, stack, top);
  }

  /** start state */
  public int start_state() {return 0;}
  /** start production */
  public int start_production() {return 0;}

  /** EOF Symbol index */
  public int EOF_sym() {return 0;}

  /** error Symbol index */
  public int error_sym() {return 1;}


  /** scan to get the next Symbol */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return lexer.nextToken(); 
    }

 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Grm$actions {

 static Symbol.Symbol sym(String s) {
	         return Symbol.Symbol.symbol(s);
	        }
	    

  /** Constructor */
  CUP$Grm$actions() { }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Grm$do_action(
    int                        CUP$Grm$act_num,
    java_cup.runtime.lr_parser CUP$Grm$parser,
    java.util.Stack            CUP$Grm$stack,
    int                        CUP$Grm$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Grm$result;

      /* select the action based on the action number */
      switch (CUP$Grm$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // jump_statement ::= RETURN SEMICOLON 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // jump_statement ::= RETURN expression SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // jump_statement ::= BREAK SEMICOLON 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // jump_statement ::= CONTINUE SEMICOLON 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(22/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // jump_statement ::= GOTO Var SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(22/*jump_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // iteration_statement ::= FOR LPAREN SEMICOLON expression SEMICOLON expression RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // iteration_statement ::= FOR LPAREN expression SEMICOLON SEMICOLON expression RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // iteration_statement ::= FOR LPAREN SEMICOLON SEMICOLON RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // iteration_statement ::= FOR LPAREN SEMICOLON expression SEMICOLON RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // iteration_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-7)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // iteration_statement ::= FOR LPAREN expression SEMICOLON expression SEMICOLON expression RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-8)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // iteration_statement ::= DO statement WHILE LPAREN expression RPAREN SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // iteration_statement ::= WHILE LPAREN expression RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(21/*iteration_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // selection_statement ::= IF LPAREN expression RPAREN statement ELSE statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*selection_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-6)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // selection_statement ::= IF LPAREN expression RPAREN statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(20/*selection_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // expression_statement ::= SEMICOLON 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(19/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // expression_statement ::= expression SEMICOLON 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(19/*expression_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // statement_list ::= statement_list statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*statement_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // statement_list ::= statement 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(23/*statement_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // compound_statement ::= LBRACE RBRACE 
            {
              Absyn.Exp RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(18/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // compound_statement ::= LBRACE declaration_list RBRACE 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // compound_statement ::= LBRACE statement_list RBRACE 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // compound_statement ::= LBRACE declaration_list statement_list RBRACE 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(18/*compound_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // labeled_statement ::= Var COLON statement 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp s = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(25/*labeled_statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // statement ::= jump_statement 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp s = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = s;
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // statement ::= iteration_statement 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp s = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = s;
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // statement ::= selection_statement 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp s = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = s;
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // statement ::= expression_statement 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp s = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = s;
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // statement ::= compound_statement 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp s = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = s;
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // statement ::= labeled_statement 
            {
              Absyn.Exp RESULT = null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp s = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = s;
              CUP$Grm$result = new java_cup.runtime.Symbol(1/*statement*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // Var ::= ID 
            {
              Absyn.Var RESULT = null;
		int nleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		String n = (String)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SimpleVar(nleft, sym(n)); 
              CUP$Grm$result = new java_cup.runtime.Symbol(28/*Var*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // expression ::= expression COMMA assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.COMMA, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // expression ::= assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(17/*expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.RSHIFTASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.LSHIFTASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.BWISEXORASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.BWISEORASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.BWISEANDASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // assignment_expression ::= unary_expression MODASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.MODASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // assignment_expression ::= unary_expression MULASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.MULASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // assignment_expression ::= unary_expression DIVASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.DIVASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // assignment_expression ::= unary_expression SUBASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.SUBASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // assignment_expression ::= unary_expression ADDASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.ADDASSIGN, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // assignment_expression ::= unary_expression ASSIGN assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp v = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.ASSIGN, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // assignment_expression ::= conditional_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(3/*assignment_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // constant_expression ::= conditional_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(27/*constant_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // conditional_expression ::= logical_or_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(26/*conditional_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // logical_or_expression ::= logical_or_expression OR logical_and_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.OR, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*logical_or_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // logical_or_expression ::= logical_and_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(16/*logical_or_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // logical_and_expression ::= logical_and_expression AND inclusive_or_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.AND, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*logical_and_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // logical_and_expression ::= inclusive_or_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(15/*logical_and_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // inclusive_or_expression ::= inclusive_or_expression BWISEOR exclusive_or_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.BITWISEOR, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*inclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // inclusive_or_expression ::= exclusive_or_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(14/*inclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // exclusive_or_expression ::= and_expression BWISEXOR equality_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.BITWISEXOR, e2);
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // exclusive_or_expression ::= and_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(13/*exclusive_or_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // and_expression ::= and_expression BITWISEAND equality_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.BITWISEAND, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*and_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // and_expression ::= equality_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(12/*and_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // equality_expression ::= equality_expression NEQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.NE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // equality_expression ::= equality_expression EQ relational_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.EQ, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // equality_expression ::= relational_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(11/*equality_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // relational_expression ::= relational_expression LT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.LT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // relational_expression ::= relational_expression LE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.LE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // relational_expression ::= relational_expression GT shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.GT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // relational_expression ::= relational_expression GE shift_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.GE, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // relational_expression ::= shift_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(10/*relational_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // shift_expression ::= shift_expression LSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.LSHIFT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // shift_expression ::= shift_expression RSHIFT additive_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.RSHIFT, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // shift_expression ::= additive_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(9/*shift_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // additive_expression ::= additive_expression MINUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.MINUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // additive_expression ::= additive_expression PLUS multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.PLUS, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // additive_expression ::= multiplicative_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(8/*additive_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.MOD, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.DIV, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
            {
              Absyn.Exp RESULT = null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e1 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e2 = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.MUL, e2); 
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // multiplicative_expression ::= cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(7/*multiplicative_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // cast_expression ::= unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(5/*cast_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // unary_expression ::= SIZEOF LPAREN type_name RPAREN 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // unary_expression ::= NOT cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.NOT, e, true);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // unary_expression ::= TILDE cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.TILDE, e, true);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // unary_expression ::= MINUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.MINUS, e, true);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // unary_expression ::= PLUS cast_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.PLUS, e, true);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // unary_expression ::= DECREMENT unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.DECREMENT, e, true);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // unary_expression ::= INCREMENT unary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.INCREMENT, e, true);
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // unary_expression ::= postfix_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(6/*unary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // argument_expression_list ::= argument_expression_list COMMA assignment_expression 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // argument_expression_list ::= assignment_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(24/*argument_expression_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // postfix_expression ::= postfix_expression ARROW Var 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.StructExp(0, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // postfix_expression ::= postfix_expression PERIOD Var 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-2)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.StructExp(0, v, e); 
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // postfix_expression ::= postfix_expression DECREMENT 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.DECREMENT, e, false);
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // postfix_expression ::= postfix_expression INCREMENT 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.INCREMENT, e, false);
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // postfix_expression ::= postfix_expression LPAREN RPAREN 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // postfix_expression ::= postfix_expression LPAREN argument_expression_list RPAREN 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // postfix_expression ::= postfix_expression LBRACK expression RBRACK 
            {
              Absyn.Exp RESULT = null;
		
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // postfix_expression ::= primary_expression 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(4/*postfix_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // primary_expression ::= LPAREN expression RPAREN 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Absyn.Exp e = (Absyn.Exp)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		 RESULT = e; 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // primary_expression ::= DECIMAL_LITERAL 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = new Absyn.IntExp(0, e.intValue()); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // primary_expression ::= Var 
            {
              Absyn.Exp RESULT = null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Absyn.Var v = (Absyn.Var)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.VarExp(vleft, v); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // primary_expression ::= error 
            {
              Absyn.Exp RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		 RESULT = new Absyn.SeqExp(eleft, null); 
              CUP$Grm$result = new java_cup.runtime.Symbol(2/*primary_expression*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // initializer ::= LBRACE initializer_list RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(54/*initializer*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // initializer ::= assignment_expression 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(54/*initializer*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // initializer_list ::= initializer_list COMMA initializer 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(53/*initializer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // initializer_list ::= initializer 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(53/*initializer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // parameter_type_list ::= parameter_type_list COMMA type 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(52/*parameter_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // parameter_type_list ::= type 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(52/*parameter_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // parameter_list ::= parameter_list COMMA type name 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(51/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // parameter_list ::= type name 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(51/*parameter_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // parameters ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(50/*parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(50/*parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // parameters ::= LPAREN parameter_list RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(50/*parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // type_parameters ::= LPAREN RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(49/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // type_parameters ::= LPAREN parameter_type_list COMMA ELIPSES RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(49/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // type_parameters ::= LPAREN parameter_type_list RPAREN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(49/*type_parameters*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // struct_or_union ::= UNION 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(48/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // struct_or_union ::= STRUCT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(48/*struct_or_union*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // struct_declaration_list ::= struct_declaration_list type name SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // struct_declaration_list ::= type name SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(30/*struct_declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // enumerator ::= ID ASSIGN constant_expression 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // enumerator ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(29/*enumerator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // enumerator_list ::= enumerator_list COMMA enumerator 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(32/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // enumerator_list ::= enumerator 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(32/*enumerator_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(47/*struct_or_union_declarator*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // initialization ::= ASSIGN initializer 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(46/*initialization*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // type_name ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // type_name ::= ENUM ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // type_name ::= DOUBLE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // type_name ::= FLOAT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // type_name ::= LONG 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // type_name ::= INT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // type_name ::= SHORT 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // type_name ::= CHAR 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // type_name ::= VOID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(45/*type_name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // pointer_list ::= pointer_list TIMES 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(44/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // pointer_list ::= TIMES 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(44/*pointer_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // brackets_list ::= expression_array_type_list 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(43/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // brackets_list ::= empty_array_type_list 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(43/*brackets_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // type_augments ::= pointer_list brackets_list 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(42/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // type_augments ::= brackets_list 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(42/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // type_augments ::= pointer_list 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(42/*type_augments*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // type ::= type_name 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(41/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // type ::= type_name type_augments 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(41/*type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // expression_array_type ::= LBRACK constant_expression RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(31/*expression_array_type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-2)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // expression_array_type_list ::= expression_array_type_list expression_array_type 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(40/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // expression_array_type_list ::= expression_array_type 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(40/*expression_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // empty_array_type ::= LBRACK RBRACK 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(39/*empty_array_type*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // empty_array_type_list ::= empty_array_type_list empty_array_type 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(38/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // empty_array_type_list ::= empty_array_type 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(38/*empty_array_type_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // bitfield_value ::= REGISTER 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // bitfield_value ::= AUTO 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // bitfield_value ::= STATIC 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // bitfield_value ::= EXTERN 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // bitfield_value ::= VOLATILE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // bitfield_value ::= CONST 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(37/*bitfield_value*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // bitfield_list ::= bitfield_value bitfield_list 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(36/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // bitfield_list ::= 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(36/*bitfield_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // name ::= ID 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(35/*name*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // declaration ::= ENUM ID LBRACE enumerator_list RBRACE 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-4)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // declaration ::= bitfield_list struct_or_union name struct_or_union_declarator 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // declaration ::= TYPEDEF type name SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-3)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // declaration ::= FUN bitfield_list type name type_parameters SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // declaration ::= FUN bitfield_list type name parameters compound_statement 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // declaration ::= VAR bitfield_list type name initialization SEMICOLON 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(34/*declaration*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-5)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // declaration_list ::= declaration 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-0)).value;
		RESULT = e;
              CUP$Grm$result = new java_cup.runtime.Symbol(33/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // declaration_list ::= declaration_list declaration 
            {
              Object RESULT = null;

              CUP$Grm$result = new java_cup.runtime.Symbol(33/*declaration_list*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          return CUP$Grm$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= declaration_list EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Grm$stack.elementAt(CUP$Grm$top-1)).value;
		RESULT = start_val;
              CUP$Grm$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-1)).left, ((java_cup.runtime.Symbol)CUP$Grm$stack.elementAt(CUP$Grm$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$Grm$parser.done_parsing();
          return CUP$Grm$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

