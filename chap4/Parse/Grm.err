Opening files...
Parsing specification from standard input...
Checking specification...
Warning: Terminal "SIZEOF" was declared but never used
Warning: Terminal "GOTO" was declared but never used
Warning: Terminal "WHILE" was declared but never used
Warning: Terminal "DO" was declared but never used
Warning: Terminal "FOR" was declared but never used
Warning: Terminal "RETURN" was declared but never used
Warning: Terminal "ELSE" was declared but never used
Warning: Terminal "BREAK" was declared but never used
Warning: Terminal "STRING_LITERAL" was declared but never used
Warning: Terminal "CONTINUE" was declared but never used
Warning: Terminal "IF" was declared but never used
Warning: Terminal "BWISEOR" was declared but never used
Warning: Terminal "COLON" was declared but never used
Warning: Terminal "BWISEXOR" was declared but never used
Warning: Terminal "CHAR_LITERAL" was declared but never used
Warning: Non terminal "exclusive_or_expression" was declared but never used
Building parse tables...
  Computing non-terminal nullability...
  Computing first sets...
  Building state machine...
  Filling in tables...
  Checking for non-reduced productions...
*** Production "comma_operator ::= expression COMMA assignment_expression " never reduced
*** Production "comma_operator ::= assignment_expression " never reduced
*** Production "and_expression ::= and_expression BITWISEAND equality_expression " never reduced
*** Production "and_expression ::= equality_expression " never reduced
*** Production "equality_expression ::= equality_expression NEQ relational_expression " never reduced
*** Production "equality_expression ::= equality_expression EQ relational_expression " never reduced
*** Production "equality_expression ::= relational_expression " never reduced
*** Production "relational_expression ::= relational_expression LT shift_expression " never reduced
*** Production "relational_expression ::= relational_expression LE shift_expression " never reduced
*** Production "relational_expression ::= relational_expression GT shift_expression " never reduced
*** Production "relational_expression ::= relational_expression GE shift_expression " never reduced
*** Production "relational_expression ::= shift_expression " never reduced
*** Production "shift_expression ::= shift_expression LSHIFT additive_expression " never reduced
*** Production "shift_expression ::= shift_expression RSHIFT additive_expression " never reduced
*** Production "shift_expression ::= additive_expression " never reduced
*** Production "additive_expression ::= additive_expression MINUS multiplicative_expression " never reduced
*** Production "additive_expression ::= additive_expression PLUS multiplicative_expression " never reduced
*** Production "additive_expression ::= multiplicative_expression " never reduced
*** Production "multiplicative_expression ::= multiplicative_expression MODULUS cast_expression " never reduced
*** Production "multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression " never reduced
*** Production "multiplicative_expression ::= multiplicative_expression TIMES cast_expression " never reduced
*** Production "multiplicative_expression ::= cast_expression " never reduced
*** Production "parameters ::= LPAREN RPAREN " never reduced
*** Production "parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN " never reduced
*** Production "parameters ::= LPAREN parameter_list RPAREN " never reduced
Writing parser...
===== Terminals =====
SHORT TIMES GT ARROW DIVASSIGN 
CONST GE PERIOD REGISTER ENUM 
RBRACK SIZEOF COMMA RBRACE RPAREN 
LBRACK LT INCREMENT SUBASSIGN DOUBLE 
BWISEANDASSIGN STRUCT LBRACE LPAREN MODASSIGN 
NOT TILDE LE VAR BITWISEAND 
FLOAT GOTO EQ LSHIFTASSIGN MODULUS 
LONG PLUS DIVIDE WHILE UNION 
ASSIGN CHAR ADDASSIGN DO FOR 
VOID EXTERN RETURN ELSE BREAK 
FUN INT STRING_LITERAL EOF SEMICOLON 
MULASSIGN ELIPSES DECREMENT MINUS OR 
error DECIMAL_LITERAL CONTINUE IF BWISEOR 
ID COLON BWISEXOR BWISEORASSIGN RSHIFTASSIGN 
VOLATILE CHAR_LITERAL RSHIFT BWISEXORASSIGN NEQ 
AND STATIC LSHIFT TYPEDEF AUTO 


===== Non terminals =====
bitfield_list struct_declaration_list declaration_list initializer pointer_list 
additive_expression enumerator $START Var compound_statement 
initializer_list constant_expression initialization struct_or_union primary_expression 
name logical_or_expression equality_expression exclusive_or_expression cast_expression 
expression_array_type_list bitfield_value enumerator_list parameter_type_list expression 
type_parameters unary_expression empty_array_type_list brackets_list type_name 
postfix_expression logical_and_expression shift_expression and_expression parameter_list 
empty_array_type expression_array_type inclusive_or_expression assignment_expression type_augments 
statementordecloration_list comma_operator multiplicative_expression expression_statement parameters 
struct_or_union_declarator declaration relational_expression type 

===== Productions =====
Var ::= ID 
comma_operator ::= expression COMMA assignment_expression 
comma_operator ::= assignment_expression 
assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression 
assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression 
assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression 
assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression 
assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression 
assignment_expression ::= unary_expression MODASSIGN assignment_expression 
assignment_expression ::= unary_expression MULASSIGN assignment_expression 
assignment_expression ::= unary_expression DIVASSIGN assignment_expression 
assignment_expression ::= unary_expression SUBASSIGN assignment_expression 
assignment_expression ::= unary_expression ADDASSIGN assignment_expression 
assignment_expression ::= unary_expression ASSIGN assignment_expression 
assignment_expression ::= logical_or_expression 
logical_or_expression ::= logical_or_expression OR logical_and_expression 
logical_or_expression ::= logical_and_expression 
logical_and_expression ::= logical_and_expression AND inclusive_or_expression 
logical_and_expression ::= inclusive_or_expression 
and_expression ::= and_expression BITWISEAND equality_expression 
and_expression ::= equality_expression 
equality_expression ::= equality_expression NEQ relational_expression 
equality_expression ::= equality_expression EQ relational_expression 
equality_expression ::= relational_expression 
relational_expression ::= relational_expression LT shift_expression 
relational_expression ::= relational_expression LE shift_expression 
relational_expression ::= relational_expression GT shift_expression 
relational_expression ::= relational_expression GE shift_expression 
relational_expression ::= shift_expression 
shift_expression ::= shift_expression LSHIFT additive_expression 
shift_expression ::= shift_expression RSHIFT additive_expression 
shift_expression ::= additive_expression 
additive_expression ::= additive_expression MINUS multiplicative_expression 
additive_expression ::= additive_expression PLUS multiplicative_expression 
additive_expression ::= multiplicative_expression 
multiplicative_expression ::= multiplicative_expression MODULUS cast_expression 
multiplicative_expression ::= multiplicative_expression DIVIDE cast_expression 
multiplicative_expression ::= multiplicative_expression TIMES cast_expression 
multiplicative_expression ::= cast_expression 
cast_expression ::= unary_expression 
unary_expression ::= NOT cast_expression 
unary_expression ::= TILDE cast_expression 
unary_expression ::= MINUS cast_expression 
unary_expression ::= PLUS cast_expression 
unary_expression ::= DECREMENT unary_expression 
unary_expression ::= INCREMENT unary_expression 
unary_expression ::= postfix_expression 
postfix_expression ::= postfix_expression ARROW Var 
postfix_expression ::= postfix_expression PERIOD Var 
postfix_expression ::= postfix_expression DECREMENT 
postfix_expression ::= postfix_expression INCREMENT 
postfix_expression ::= primary_expression 
primary_expression ::= LPAREN expression RPAREN 
primary_expression ::= DECIMAL_LITERAL 
primary_expression ::= Var 
primary_expression ::= error 
initializer ::= LBRACE initializer_list RBRACE 
initializer ::= assignment_expression 
initializer_list ::= initializer_list COMMA initializer 
initializer_list ::= initializer 
parameter_type_list ::= parameter_type_list COMMA type 
parameter_type_list ::= type 
parameter_list ::= parameter_list COMMA type name 
parameter_list ::= type name 
parameters ::= LPAREN RPAREN 
parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN 
parameters ::= LPAREN parameter_list RPAREN 
type_parameters ::= LPAREN RPAREN 
type_parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN 
type_parameters ::= LPAREN parameter_type_list RPAREN 
struct_or_union ::= UNION 
struct_or_union ::= STRUCT 
struct_declaration_list ::= struct_declaration_list type name SEMICOLON 
struct_declaration_list ::= type name SEMICOLON 
enumerator ::= ID ASSIGN constant_expression 
enumerator ::= ID 
enumerator_list ::= enumerator_list COMMA enumerator 
enumerator_list ::= enumerator 
struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE 
initialization ::= ASSIGN initializer 
type_name ::= ID 
type_name ::= ENUM ID 
type_name ::= DOUBLE 
type_name ::= FLOAT 
type_name ::= LONG 
type_name ::= INT 
type_name ::= SHORT 
type_name ::= CHAR 
type_name ::= VOID 
pointer_list ::= pointer_list TIMES 
pointer_list ::= TIMES 
brackets_list ::= expression_array_type_list 
brackets_list ::= empty_array_type_list 
type_augments ::= pointer_list brackets_list 
type_augments ::= brackets_list 
type_augments ::= pointer_list 
type ::= type_name 
type ::= type_name type_augments 
expression_array_type ::= LBRACK constant_expression RBRACK 
expression_array_type_list ::= expression_array_type_list expression_array_type 
expression_array_type_list ::= expression_array_type 
empty_array_type ::= LBRACK RBRACK 
empty_array_type_list ::= empty_array_type_list empty_array_type 
empty_array_type_list ::= empty_array_type 
bitfield_value ::= REGISTER 
bitfield_value ::= AUTO 
bitfield_value ::= STATIC 
bitfield_value ::= EXTERN 
bitfield_value ::= VOLATILE 
bitfield_value ::= CONST 
bitfield_list ::= bitfield_value bitfield_list 
name ::= ID 
declaration ::= ENUM ID LBRACE enumerator_list RBRACE 
declaration ::= bitfield_list struct_or_union name struct_or_union_declarator 
declaration ::= TYPEDEF type name SEMICOLON 
declaration ::= FUN bitfield_list type name type_parameters SEMICOLON 
declaration ::= FUN bitfield_list type name parameters compound_statement 
declaration ::= VAR bitfield_list type name initialization SEMICOLON 
expression_statement ::= SEMICOLON 
expression_statement ::= unary_expression SEMICOLON 
statementordecloration_list ::= expression_statement 
statementordecloration_list ::= declaration 
declaration_list ::= statementordecloration_list 
declaration_list ::= declaration_list statementordecloration_list 
$START ::= declaration_list EOF 

===== Viable Prefix Recognizer =====
START lalr_state [0]: {
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {STRUCT UNION }]
  [expression_statement ::= (*) unary_expression SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) AUTO , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) TYPEDEF type name SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [declaration_list ::= (*) declaration_list statementordecloration_list , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON }]
  [primary_expression ::= (*) error , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) CONST , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [expression_statement ::= (*) SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) REGISTER , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) bitfield_list struct_or_union name struct_or_union_declarator , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [declaration_list ::= (*) statementordecloration_list , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON }]
  [primary_expression ::= (*) Var , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) VOLATILE , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) VAR bitfield_list type name initialization SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [declaration ::= (*) ENUM ID LBRACE enumerator_list RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [statementordecloration_list ::= (*) declaration , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) EXTERN , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) FUN bitfield_list type name parameters compound_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [statementordecloration_list ::= (*) expression_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) STATIC , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) FUN bitfield_list type name type_parameters SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [$START ::= (*) declaration_list EOF , {EOF }]
}
transition on bitfield_list to state [31]
transition on FUN to state [30]
transition on VAR to state [29]
transition on error to state [28]
transition on CONST to state [27]
transition on ENUM to state [26]
transition on MINUS to state [25]
transition on TYPEDEF to state [24]
transition on INCREMENT to state [23]
transition on bitfield_value to state [22]
transition on AUTO to state [21]
transition on declaration_list to state [20]
transition on expression_statement to state [19]
transition on postfix_expression to state [18]
transition on STATIC to state [17]
transition on TILDE to state [16]
transition on VOLATILE to state [15]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [12]
transition on NOT to state [11]
transition on DECREMENT to state [10]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on REGISTER to state [7]
transition on PLUS to state [6]
transition on SEMICOLON to state [5]
transition on primary_expression to state [4]
transition on statementordecloration_list to state [3]
transition on EXTERN to state [2]
transition on declaration to state [1]

-------------------
lalr_state [1]: {
  [statementordecloration_list ::= declaration (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [2]: {
  [bitfield_value ::= EXTERN (*) , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
}

-------------------
lalr_state [3]: {
  [declaration_list ::= statementordecloration_list (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [4]: {
  [postfix_expression ::= primary_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [5]: {
  [expression_statement ::= SEMICOLON (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [6]: {
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= PLUS (*) cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on Var to state [8]
transition on LPAREN to state [13]
transition on primary_expression to state [4]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on error to state [28]
transition on ID to state [14]
transition on DECREMENT to state [10]
transition on cast_expression to state [173]
transition on TILDE to state [16]
transition on postfix_expression to state [18]
transition on PLUS to state [6]
transition on unary_expression to state [152]
transition on INCREMENT to state [23]
transition on MINUS to state [25]

-------------------
lalr_state [7]: {
  [bitfield_value ::= REGISTER (*) , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
}

-------------------
lalr_state [8]: {
  [primary_expression ::= Var (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [9]: {
  [primary_expression ::= DECIMAL_LITERAL (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [10]: {
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= DECREMENT (*) unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on Var to state [8]
transition on LPAREN to state [13]
transition on primary_expression to state [4]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on error to state [28]
transition on ID to state [14]
transition on DECREMENT to state [10]
transition on TILDE to state [16]
transition on postfix_expression to state [18]
transition on PLUS to state [6]
transition on unary_expression to state [172]
transition on INCREMENT to state [23]
transition on MINUS to state [25]

-------------------
lalr_state [11]: {
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= NOT (*) cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on Var to state [8]
transition on LPAREN to state [13]
transition on primary_expression to state [4]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on error to state [28]
transition on ID to state [14]
transition on DECREMENT to state [10]
transition on cast_expression to state [171]
transition on TILDE to state [16]
transition on postfix_expression to state [18]
transition on PLUS to state [6]
transition on unary_expression to state [152]
transition on INCREMENT to state [23]
transition on MINUS to state [25]

-------------------
lalr_state [12]: {
  [expression_statement ::= unary_expression (*) SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on SEMICOLON to state [170]

-------------------
lalr_state [13]: {
  [primary_expression ::= LPAREN (*) expression RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}
transition on expression to state [168]

-------------------
lalr_state [14]: {
  [Var ::= ID (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [15]: {
  [bitfield_value ::= VOLATILE (*) , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
}

-------------------
lalr_state [16]: {
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= TILDE (*) cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on Var to state [8]
transition on LPAREN to state [13]
transition on primary_expression to state [4]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on error to state [28]
transition on ID to state [14]
transition on DECREMENT to state [10]
transition on cast_expression to state [167]
transition on TILDE to state [16]
transition on postfix_expression to state [18]
transition on PLUS to state [6]
transition on unary_expression to state [152]
transition on INCREMENT to state [23]
transition on MINUS to state [25]

-------------------
lalr_state [17]: {
  [bitfield_value ::= STATIC (*) , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
}

-------------------
lalr_state [18]: {
  [postfix_expression ::= postfix_expression (*) PERIOD Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= postfix_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= postfix_expression (*) DECREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= postfix_expression (*) ARROW Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= postfix_expression (*) INCREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}
transition on PERIOD to state [164]
transition on ARROW to state [163]
transition on INCREMENT to state [162]
transition on DECREMENT to state [161]

-------------------
lalr_state [19]: {
  [statementordecloration_list ::= expression_statement (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [20]: {
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {STRUCT UNION }]
  [expression_statement ::= (*) unary_expression SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) AUTO , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration_list ::= declaration_list (*) statementordecloration_list , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [declaration ::= (*) TYPEDEF type name SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON }]
  [primary_expression ::= (*) error , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) CONST , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [expression_statement ::= (*) SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) REGISTER , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) bitfield_list struct_or_union name struct_or_union_declarator , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON }]
  [primary_expression ::= (*) Var , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) VOLATILE , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) VAR bitfield_list type name initialization SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [declaration ::= (*) ENUM ID LBRACE enumerator_list RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [statementordecloration_list ::= (*) declaration , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) EXTERN , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= (*) FUN bitfield_list type name parameters compound_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [statementordecloration_list ::= (*) expression_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ARROW DECREMENT INCREMENT PERIOD }]
  [bitfield_value ::= (*) STATIC , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [$START ::= declaration_list (*) EOF , {EOF }]
  [declaration ::= (*) FUN bitfield_list type name type_parameters SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on bitfield_list to state [31]
transition on FUN to state [30]
transition on VAR to state [29]
transition on error to state [28]
transition on CONST to state [27]
transition on ENUM to state [26]
transition on MINUS to state [25]
transition on TYPEDEF to state [24]
transition on INCREMENT to state [23]
transition on bitfield_value to state [22]
transition on AUTO to state [21]
transition on EOF to state [160]
transition on expression_statement to state [19]
transition on postfix_expression to state [18]
transition on STATIC to state [17]
transition on TILDE to state [16]
transition on VOLATILE to state [15]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [12]
transition on NOT to state [11]
transition on DECREMENT to state [10]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on REGISTER to state [7]
transition on PLUS to state [6]
transition on SEMICOLON to state [5]
transition on primary_expression to state [4]
transition on statementordecloration_list to state [159]
transition on EXTERN to state [2]
transition on declaration to state [1]

-------------------
lalr_state [21]: {
  [bitfield_value ::= AUTO (*) , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
}

-------------------
lalr_state [22]: {
  [bitfield_value ::= (*) AUTO , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) VOLATILE , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) STATIC , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) CONST , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) REGISTER , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) EXTERN , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_list ::= bitfield_value (*) bitfield_list , {ID INT STRUCT DOUBLE UNION SHORT FLOAT VOID LONG ENUM CHAR }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {ID INT STRUCT DOUBLE UNION SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on bitfield_value to state [22]
transition on EXTERN to state [2]
transition on AUTO to state [21]
transition on STATIC to state [17]
transition on REGISTER to state [7]
transition on bitfield_list to state [158]
transition on VOLATILE to state [15]
transition on CONST to state [27]

-------------------
lalr_state [23]: {
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= INCREMENT (*) unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on Var to state [8]
transition on LPAREN to state [13]
transition on primary_expression to state [4]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on error to state [28]
transition on ID to state [14]
transition on DECREMENT to state [10]
transition on TILDE to state [16]
transition on postfix_expression to state [18]
transition on PLUS to state [6]
transition on unary_expression to state [157]
transition on INCREMENT to state [23]
transition on MINUS to state [25]

-------------------
lalr_state [24]: {
  [type_name ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [type_name ::= (*) LONG , {ID LBRACK TIMES }]
  [type_name ::= (*) CHAR , {ID LBRACK TIMES }]
  [type ::= (*) type_name , {ID }]
  [type_name ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type_name ::= (*) INT , {ID LBRACK TIMES }]
  [type_name ::= (*) VOID , {ID LBRACK TIMES }]
  [declaration ::= TYPEDEF (*) type name SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [type ::= (*) type_name type_augments , {ID }]
  [type_name ::= (*) ID , {ID LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {ID LBRACK TIMES }]
  [type_name ::= (*) SHORT , {ID LBRACK TIMES }]
}
transition on CHAR to state [50]
transition on FLOAT to state [49]
transition on SHORT to state [48]
transition on type to state [154]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [25]: {
  [primary_expression ::= (*) LPAREN expression RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= MINUS (*) cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [cast_expression ::= (*) unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) postfix_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) INCREMENT unary_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on Var to state [8]
transition on LPAREN to state [13]
transition on primary_expression to state [4]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on error to state [28]
transition on ID to state [14]
transition on DECREMENT to state [10]
transition on cast_expression to state [153]
transition on TILDE to state [16]
transition on postfix_expression to state [18]
transition on PLUS to state [6]
transition on unary_expression to state [152]
transition on INCREMENT to state [23]
transition on MINUS to state [25]

-------------------
lalr_state [26]: {
  [declaration ::= ENUM (*) ID LBRACE enumerator_list RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on ID to state [142]

-------------------
lalr_state [27]: {
  [bitfield_value ::= CONST (*) , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
}

-------------------
lalr_state [28]: {
  [primary_expression ::= error (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [29]: {
  [bitfield_value ::= (*) AUTO , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) VOLATILE , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= VAR (*) bitfield_list type name initialization SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [bitfield_value ::= (*) STATIC , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) CONST , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) REGISTER , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) EXTERN , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {ID INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on bitfield_value to state [22]
transition on EXTERN to state [2]
transition on AUTO to state [21]
transition on bitfield_list to state [98]
transition on STATIC to state [17]
transition on REGISTER to state [7]
transition on VOLATILE to state [15]
transition on CONST to state [27]

-------------------
lalr_state [30]: {
  [bitfield_value ::= (*) REGISTER , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) EXTERN , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_list ::= (*) bitfield_value bitfield_list , {ID INT DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [declaration ::= FUN (*) bitfield_list type name parameters compound_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [bitfield_value ::= (*) AUTO , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) VOLATILE , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) STATIC , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [bitfield_value ::= (*) CONST , {VOLATILE REGISTER STATIC EXTERN CONST AUTO }]
  [declaration ::= FUN (*) bitfield_list type name type_parameters SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on bitfield_value to state [22]
transition on EXTERN to state [2]
transition on AUTO to state [21]
transition on REGISTER to state [7]
transition on bitfield_list to state [76]
transition on STATIC to state [17]
transition on VOLATILE to state [15]
transition on CONST to state [27]

-------------------
lalr_state [31]: {
  [struct_or_union ::= (*) UNION , {ID }]
  [struct_or_union ::= (*) STRUCT , {ID }]
  [declaration ::= bitfield_list (*) struct_or_union name struct_or_union_declarator , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on UNION to state [34]
transition on STRUCT to state [33]
transition on struct_or_union to state [32]

-------------------
lalr_state [32]: {
  [name ::= (*) ID , {LBRACE }]
  [declaration ::= bitfield_list struct_or_union (*) name struct_or_union_declarator , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on name to state [36]
transition on ID to state [35]

-------------------
lalr_state [33]: {
  [struct_or_union ::= STRUCT (*) , {ID }]
}

-------------------
lalr_state [34]: {
  [struct_or_union ::= UNION (*) , {ID }]
}

-------------------
lalr_state [35]: {
  [name ::= ID (*) , {COMMA SEMICOLON LPAREN RPAREN LBRACE ASSIGN }]
}

-------------------
lalr_state [36]: {
  [struct_or_union_declarator ::= (*) LBRACE struct_declaration_list RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [declaration ::= bitfield_list struct_or_union name (*) struct_or_union_declarator , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on struct_or_union_declarator to state [38]
transition on LBRACE to state [37]

-------------------
lalr_state [37]: {
  [type_name ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [type_name ::= (*) LONG , {ID LBRACK TIMES }]
  [type_name ::= (*) CHAR , {ID LBRACK TIMES }]
  [type ::= (*) type_name , {ID }]
  [struct_declaration_list ::= (*) type name SEMICOLON , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [type_name ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type_name ::= (*) INT , {ID LBRACK TIMES }]
  [type_name ::= (*) VOID , {ID LBRACK TIMES }]
  [type ::= (*) type_name type_augments , {ID }]
  [type_name ::= (*) ID , {ID LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {ID LBRACK TIMES }]
  [type_name ::= (*) SHORT , {ID LBRACK TIMES }]
  [struct_declaration_list ::= (*) struct_declaration_list type name SEMICOLON , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [struct_or_union_declarator ::= LBRACE (*) struct_declaration_list RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on CHAR to state [50]
transition on FLOAT to state [49]
transition on SHORT to state [48]
transition on type to state [47]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on struct_declaration_list to state [44]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [38]: {
  [declaration ::= bitfield_list struct_or_union name struct_or_union_declarator (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [39]: {
  [type_name ::= ENUM (*) ID , {ID COMMA RPAREN LBRACK TIMES }]
}
transition on ID to state [75]

-------------------
lalr_state [40]: {
  [type_name ::= INT (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [41]: {
  [pointer_list ::= (*) TIMES , {ID COMMA RPAREN LBRACK TIMES }]
  [type ::= type_name (*) , {ID COMMA RPAREN }]
  [type_augments ::= (*) pointer_list brackets_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type_list expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type_list empty_array_type , {ID COMMA RPAREN LBRACK }]
  [brackets_list ::= (*) expression_array_type_list , {ID COMMA RPAREN }]
  [type ::= type_name (*) type_augments , {ID COMMA RPAREN }]
  [type_augments ::= (*) brackets_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type , {ID COMMA RPAREN LBRACK }]
  [pointer_list ::= (*) pointer_list TIMES , {ID COMMA RPAREN LBRACK TIMES }]
  [brackets_list ::= (*) empty_array_type_list , {ID COMMA RPAREN }]
  [type_augments ::= (*) pointer_list , {ID COMMA RPAREN }]
  [expression_array_type ::= (*) LBRACK constant_expression RBRACK , {ID COMMA RPAREN LBRACK }]
  [empty_array_type ::= (*) LBRACK RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on LBRACK to state [65]
transition on TIMES to state [64]
transition on empty_array_type_list to state [63]
transition on expression_array_type_list to state [62]
transition on brackets_list to state [61]
transition on type_augments to state [60]
transition on expression_array_type to state [59]
transition on pointer_list to state [58]
transition on empty_array_type to state [57]

-------------------
lalr_state [42]: {
  [type_name ::= LONG (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [43]: {
  [type_name ::= VOID (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [44]: {
  [type_name ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [type_name ::= (*) LONG , {ID LBRACK TIMES }]
  [type_name ::= (*) CHAR , {ID LBRACK TIMES }]
  [type ::= (*) type_name , {ID }]
  [type_name ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type_name ::= (*) INT , {ID LBRACK TIMES }]
  [type_name ::= (*) VOID , {ID LBRACK TIMES }]
  [type ::= (*) type_name type_augments , {ID }]
  [type_name ::= (*) ID , {ID LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {ID LBRACK TIMES }]
  [type_name ::= (*) SHORT , {ID LBRACK TIMES }]
  [struct_declaration_list ::= struct_declaration_list (*) type name SEMICOLON , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
  [struct_or_union_declarator ::= LBRACE struct_declaration_list (*) RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on CHAR to state [50]
transition on FLOAT to state [49]
transition on SHORT to state [48]
transition on RBRACE to state [54]
transition on type to state [53]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [45]: {
  [type_name ::= DOUBLE (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [46]: {
  [type_name ::= ID (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [47]: {
  [name ::= (*) ID , {SEMICOLON }]
  [struct_declaration_list ::= type (*) name SEMICOLON , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on name to state [51]
transition on ID to state [35]

-------------------
lalr_state [48]: {
  [type_name ::= SHORT (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [49]: {
  [type_name ::= FLOAT (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [50]: {
  [type_name ::= CHAR (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [51]: {
  [struct_declaration_list ::= type name (*) SEMICOLON , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on SEMICOLON to state [52]

-------------------
lalr_state [52]: {
  [struct_declaration_list ::= type name SEMICOLON (*) , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}

-------------------
lalr_state [53]: {
  [name ::= (*) ID , {SEMICOLON }]
  [struct_declaration_list ::= struct_declaration_list type (*) name SEMICOLON , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on name to state [55]
transition on ID to state [35]

-------------------
lalr_state [54]: {
  [struct_or_union_declarator ::= LBRACE struct_declaration_list RBRACE (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [55]: {
  [struct_declaration_list ::= struct_declaration_list type name (*) SEMICOLON , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}
transition on SEMICOLON to state [56]

-------------------
lalr_state [56]: {
  [struct_declaration_list ::= struct_declaration_list type name SEMICOLON (*) , {ID INT RBRACE DOUBLE SHORT FLOAT VOID LONG ENUM CHAR }]
}

-------------------
lalr_state [57]: {
  [empty_array_type_list ::= empty_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [58]: {
  [type_augments ::= pointer_list (*) brackets_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type_list expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type_list empty_array_type , {ID COMMA RPAREN LBRACK }]
  [brackets_list ::= (*) expression_array_type_list , {ID COMMA RPAREN }]
  [expression_array_type_list ::= (*) expression_array_type , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= (*) empty_array_type , {ID COMMA RPAREN LBRACK }]
  [pointer_list ::= pointer_list (*) TIMES , {ID COMMA RPAREN LBRACK TIMES }]
  [type_augments ::= pointer_list (*) , {ID COMMA RPAREN }]
  [brackets_list ::= (*) empty_array_type_list , {ID COMMA RPAREN }]
  [expression_array_type ::= (*) LBRACK constant_expression RBRACK , {ID COMMA RPAREN LBRACK }]
  [empty_array_type ::= (*) LBRACK RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on expression_array_type_list to state [62]
transition on TIMES to state [74]
transition on empty_array_type to state [57]
transition on LBRACK to state [65]
transition on expression_array_type to state [59]
transition on brackets_list to state [73]
transition on empty_array_type_list to state [63]

-------------------
lalr_state [59]: {
  [expression_array_type_list ::= expression_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [60]: {
  [type ::= type_name type_augments (*) , {ID COMMA RPAREN }]
}

-------------------
lalr_state [61]: {
  [type_augments ::= brackets_list (*) , {ID COMMA RPAREN }]
}

-------------------
lalr_state [62]: {
  [expression_array_type ::= (*) LBRACK constant_expression RBRACK , {ID COMMA RPAREN LBRACK }]
  [expression_array_type_list ::= expression_array_type_list (*) expression_array_type , {ID COMMA RPAREN LBRACK }]
  [brackets_list ::= expression_array_type_list (*) , {ID COMMA RPAREN }]
}
transition on LBRACK to state [72]
transition on expression_array_type to state [71]

-------------------
lalr_state [63]: {
  [brackets_list ::= empty_array_type_list (*) , {ID COMMA RPAREN }]
  [empty_array_type ::= (*) LBRACK RBRACK , {ID COMMA RPAREN LBRACK }]
  [empty_array_type_list ::= empty_array_type_list (*) empty_array_type , {ID COMMA RPAREN LBRACK }]
}
transition on empty_array_type to state [70]
transition on LBRACK to state [69]

-------------------
lalr_state [64]: {
  [pointer_list ::= TIMES (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [65]: {
  [expression_array_type ::= LBRACK (*) constant_expression RBRACK , {ID COMMA RPAREN LBRACK }]
  [empty_array_type ::= LBRACK (*) RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on constant_expression to state [67]
transition on RBRACK to state [66]

-------------------
lalr_state [66]: {
  [empty_array_type ::= LBRACK RBRACK (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [67]: {
  [expression_array_type ::= LBRACK constant_expression (*) RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on RBRACK to state [68]

-------------------
lalr_state [68]: {
  [expression_array_type ::= LBRACK constant_expression RBRACK (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [69]: {
  [empty_array_type ::= LBRACK (*) RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on RBRACK to state [66]

-------------------
lalr_state [70]: {
  [empty_array_type_list ::= empty_array_type_list empty_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [71]: {
  [expression_array_type_list ::= expression_array_type_list expression_array_type (*) , {ID COMMA RPAREN LBRACK }]
}

-------------------
lalr_state [72]: {
  [expression_array_type ::= LBRACK (*) constant_expression RBRACK , {ID COMMA RPAREN LBRACK }]
}
transition on constant_expression to state [67]

-------------------
lalr_state [73]: {
  [type_augments ::= pointer_list brackets_list (*) , {ID COMMA RPAREN }]
}

-------------------
lalr_state [74]: {
  [pointer_list ::= pointer_list TIMES (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [75]: {
  [type_name ::= ENUM ID (*) , {ID COMMA RPAREN LBRACK TIMES }]
}

-------------------
lalr_state [76]: {
  [type_name ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [type_name ::= (*) LONG , {ID LBRACK TIMES }]
  [declaration ::= FUN bitfield_list (*) type name parameters compound_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [type_name ::= (*) CHAR , {ID LBRACK TIMES }]
  [type ::= (*) type_name , {ID }]
  [type_name ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type_name ::= (*) INT , {ID LBRACK TIMES }]
  [type_name ::= (*) VOID , {ID LBRACK TIMES }]
  [type ::= (*) type_name type_augments , {ID }]
  [type_name ::= (*) ID , {ID LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {ID LBRACK TIMES }]
  [type_name ::= (*) SHORT , {ID LBRACK TIMES }]
  [declaration ::= FUN bitfield_list (*) type name type_parameters SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on CHAR to state [50]
transition on FLOAT to state [49]
transition on SHORT to state [48]
transition on type to state [77]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [77]: {
  [name ::= (*) ID , {LPAREN }]
  [declaration ::= FUN bitfield_list type (*) name type_parameters SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [declaration ::= FUN bitfield_list type (*) name parameters compound_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on name to state [78]
transition on ID to state [35]

-------------------
lalr_state [78]: {
  [parameters ::= (*) LPAREN RPAREN , {}]
  [type_parameters ::= (*) LPAREN RPAREN , {SEMICOLON }]
  [declaration ::= FUN bitfield_list type name (*) type_parameters SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [parameters ::= (*) LPAREN parameter_list COMMA ELIPSES RPAREN , {}]
  [type_parameters ::= (*) LPAREN parameter_list COMMA ELIPSES RPAREN , {SEMICOLON }]
  [declaration ::= FUN bitfield_list type name (*) parameters compound_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [parameters ::= (*) LPAREN parameter_list RPAREN , {}]
  [type_parameters ::= (*) LPAREN parameter_type_list RPAREN , {SEMICOLON }]
}
transition on LPAREN to state [81]
transition on parameters to state [80]
transition on type_parameters to state [79]

-------------------
lalr_state [79]: {
  [declaration ::= FUN bitfield_list type name type_parameters (*) SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on SEMICOLON to state [97]

-------------------
lalr_state [80]: {
  [declaration ::= FUN bitfield_list type name parameters (*) compound_statement , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on compound_statement to state [96]

-------------------
lalr_state [81]: {
  [type_parameters ::= LPAREN (*) RPAREN , {SEMICOLON }]
  [parameter_list ::= (*) parameter_list COMMA type name , {COMMA RPAREN }]
  [type_name ::= (*) LONG , {ID COMMA RPAREN LBRACK TIMES }]
  [type_parameters ::= LPAREN (*) parameter_type_list RPAREN , {SEMICOLON }]
  [parameters ::= LPAREN (*) RPAREN , {}]
  [type ::= (*) type_name , {ID COMMA RPAREN }]
  [type_name ::= (*) SHORT , {ID COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) ENUM ID , {ID COMMA RPAREN LBRACK TIMES }]
  [parameters ::= LPAREN (*) parameter_list RPAREN , {}]
  [parameter_type_list ::= (*) type , {COMMA RPAREN }]
  [type_name ::= (*) VOID , {ID COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {ID COMMA RPAREN LBRACK TIMES }]
  [type_parameters ::= LPAREN (*) parameter_list COMMA ELIPSES RPAREN , {SEMICOLON }]
  [parameter_list ::= (*) type name , {COMMA RPAREN }]
  [type_name ::= (*) INT , {ID COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) ID , {ID COMMA RPAREN LBRACK TIMES }]
  [parameters ::= LPAREN (*) parameter_list COMMA ELIPSES RPAREN , {}]
  [parameter_type_list ::= (*) parameter_type_list COMMA type , {COMMA RPAREN }]
  [type ::= (*) type_name type_augments , {ID COMMA RPAREN }]
  [type_name ::= (*) CHAR , {ID COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) DOUBLE , {ID COMMA RPAREN LBRACK TIMES }]
}
transition on SHORT to state [48]
transition on parameter_list to state [85]
transition on FLOAT to state [49]
transition on CHAR to state [50]
transition on parameter_type_list to state [84]
transition on RPAREN to state [83]
transition on type to state [82]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [82]: {
  [name ::= (*) ID , {COMMA RPAREN }]
  [parameter_list ::= type (*) name , {COMMA RPAREN }]
  [parameter_type_list ::= type (*) , {COMMA RPAREN }]
}
transition on name to state [95]
transition on ID to state [35]

-------------------
lalr_state [83]: {
  [type_parameters ::= LPAREN RPAREN (*) , {SEMICOLON }]
  [parameters ::= LPAREN RPAREN (*) , {}]
}

-------------------
lalr_state [84]: {
  [parameter_type_list ::= parameter_type_list (*) COMMA type , {COMMA RPAREN }]
  [type_parameters ::= LPAREN parameter_type_list (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [93]
transition on COMMA to state [92]

-------------------
lalr_state [85]: {
  [parameters ::= LPAREN parameter_list (*) COMMA ELIPSES RPAREN , {}]
  [parameter_list ::= parameter_list (*) COMMA type name , {COMMA RPAREN }]
  [type_parameters ::= LPAREN parameter_list (*) COMMA ELIPSES RPAREN , {SEMICOLON }]
  [parameters ::= LPAREN parameter_list (*) RPAREN , {}]
}
transition on RPAREN to state [87]
transition on COMMA to state [86]

-------------------
lalr_state [86]: {
  [type_name ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [type_name ::= (*) LONG , {ID LBRACK TIMES }]
  [type_name ::= (*) CHAR , {ID LBRACK TIMES }]
  [type ::= (*) type_name , {ID }]
  [parameters ::= LPAREN parameter_list COMMA (*) ELIPSES RPAREN , {}]
  [parameter_list ::= parameter_list COMMA (*) type name , {COMMA RPAREN }]
  [type_name ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type_parameters ::= LPAREN parameter_list COMMA (*) ELIPSES RPAREN , {SEMICOLON }]
  [type_name ::= (*) INT , {ID LBRACK TIMES }]
  [type_name ::= (*) VOID , {ID LBRACK TIMES }]
  [type ::= (*) type_name type_augments , {ID }]
  [type_name ::= (*) ID , {ID LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {ID LBRACK TIMES }]
  [type_name ::= (*) SHORT , {ID LBRACK TIMES }]
}
transition on CHAR to state [50]
transition on FLOAT to state [49]
transition on SHORT to state [48]
transition on ELIPSES to state [89]
transition on type to state [88]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [87]: {
  [parameters ::= LPAREN parameter_list RPAREN (*) , {}]
}

-------------------
lalr_state [88]: {
  [parameter_list ::= parameter_list COMMA type (*) name , {COMMA RPAREN }]
  [name ::= (*) ID , {COMMA RPAREN }]
}
transition on name to state [91]
transition on ID to state [35]

-------------------
lalr_state [89]: {
  [parameters ::= LPAREN parameter_list COMMA ELIPSES (*) RPAREN , {}]
  [type_parameters ::= LPAREN parameter_list COMMA ELIPSES (*) RPAREN , {SEMICOLON }]
}
transition on RPAREN to state [90]

-------------------
lalr_state [90]: {
  [parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN (*) , {}]
  [type_parameters ::= LPAREN parameter_list COMMA ELIPSES RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [91]: {
  [parameter_list ::= parameter_list COMMA type name (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [92]: {
  [type_name ::= (*) ENUM ID , {COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) LONG , {COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) CHAR , {COMMA RPAREN LBRACK TIMES }]
  [type ::= (*) type_name , {COMMA RPAREN }]
  [type_name ::= (*) DOUBLE , {COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) INT , {COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) VOID , {COMMA RPAREN LBRACK TIMES }]
  [type ::= (*) type_name type_augments , {COMMA RPAREN }]
  [parameter_type_list ::= parameter_type_list COMMA (*) type , {COMMA RPAREN }]
  [type_name ::= (*) ID , {COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {COMMA RPAREN LBRACK TIMES }]
  [type_name ::= (*) SHORT , {COMMA RPAREN LBRACK TIMES }]
}
transition on CHAR to state [50]
transition on FLOAT to state [49]
transition on SHORT to state [48]
transition on type to state [94]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [93]: {
  [type_parameters ::= LPAREN parameter_type_list RPAREN (*) , {SEMICOLON }]
}

-------------------
lalr_state [94]: {
  [parameter_type_list ::= parameter_type_list COMMA type (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [95]: {
  [parameter_list ::= type name (*) , {COMMA RPAREN }]
}

-------------------
lalr_state [96]: {
  [declaration ::= FUN bitfield_list type name parameters compound_statement (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [97]: {
  [declaration ::= FUN bitfield_list type name type_parameters SEMICOLON (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [98]: {
  [type_name ::= (*) ENUM ID , {ID LBRACK TIMES }]
  [type_name ::= (*) LONG , {ID LBRACK TIMES }]
  [type_name ::= (*) CHAR , {ID LBRACK TIMES }]
  [type ::= (*) type_name , {ID }]
  [type_name ::= (*) DOUBLE , {ID LBRACK TIMES }]
  [type_name ::= (*) INT , {ID LBRACK TIMES }]
  [type_name ::= (*) VOID , {ID LBRACK TIMES }]
  [declaration ::= VAR bitfield_list (*) type name initialization SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [type ::= (*) type_name type_augments , {ID }]
  [type_name ::= (*) ID , {ID LBRACK TIMES }]
  [type_name ::= (*) FLOAT , {ID LBRACK TIMES }]
  [type_name ::= (*) SHORT , {ID LBRACK TIMES }]
}
transition on CHAR to state [50]
transition on FLOAT to state [49]
transition on SHORT to state [48]
transition on type to state [99]
transition on ID to state [46]
transition on DOUBLE to state [45]
transition on VOID to state [43]
transition on LONG to state [42]
transition on type_name to state [41]
transition on INT to state [40]
transition on ENUM to state [39]

-------------------
lalr_state [99]: {
  [declaration ::= VAR bitfield_list type (*) name initialization SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [name ::= (*) ID , {ASSIGN }]
}
transition on name to state [100]
transition on ID to state [35]

-------------------
lalr_state [100]: {
  [declaration ::= VAR bitfield_list type name (*) initialization SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [initialization ::= (*) ASSIGN initializer , {SEMICOLON }]
}
transition on ASSIGN to state [102]
transition on initialization to state [101]

-------------------
lalr_state [101]: {
  [declaration ::= VAR bitfield_list type name initialization (*) SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on SEMICOLON to state [141]

-------------------
lalr_state [102]: {
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer ::= (*) LBRACE initializer_list RBRACE , {SEMICOLON }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {SEMICOLON }]
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {SEMICOLON OR }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {SEMICOLON }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {SEMICOLON }]
  [assignment_expression ::= (*) logical_or_expression , {SEMICOLON }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {SEMICOLON }]
  [logical_and_expression ::= (*) inclusive_or_expression , {SEMICOLON AND OR }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {SEMICOLON }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {SEMICOLON }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {SEMICOLON }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {SEMICOLON AND OR }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {SEMICOLON }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {SEMICOLON }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer ::= (*) assignment_expression , {SEMICOLON }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {SEMICOLON }]
  [logical_or_expression ::= (*) logical_and_expression , {SEMICOLON OR }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initialization ::= ASSIGN (*) initializer , {SEMICOLON }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {SEMICOLON }]
}
transition on initializer to state [109]
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LBRACE to state [105]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [103]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [103]: {
  [initializer ::= assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [104]: {
  [assignment_expression ::= unary_expression (*) LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression (*) ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
}
transition on MODASSIGN to state [129]
transition on DIVASSIGN to state [128]
transition on RSHIFTASSIGN to state [127]
transition on ASSIGN to state [126]
transition on BWISEXORASSIGN to state [125]
transition on ADDASSIGN to state [124]
transition on LSHIFTASSIGN to state [123]
transition on SUBASSIGN to state [122]
transition on BWISEORASSIGN to state [121]
transition on BWISEANDASSIGN to state [120]
transition on MULASSIGN to state [119]

-------------------
lalr_state [105]: {
  [initializer ::= LBRACE (*) initializer_list RBRACE , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer ::= (*) LBRACE initializer_list RBRACE , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA RBRACE OR }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA RBRACE }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer_list ::= (*) initializer , {COMMA RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA RBRACE AND OR }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA RBRACE }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer_list ::= (*) initializer_list COMMA initializer , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA RBRACE AND OR }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer ::= (*) assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA RBRACE OR }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA RBRACE }]
}
transition on initializer to state [115]
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on initializer_list to state [114]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LBRACE to state [105]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [103]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [106]: {
  [logical_and_expression ::= inclusive_or_expression (*) , {COMMA SEMICOLON RBRACE AND OR }]
}

-------------------
lalr_state [107]: {
  [logical_or_expression ::= logical_and_expression (*) , {COMMA SEMICOLON RBRACE OR }]
  [logical_and_expression ::= logical_and_expression (*) AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
}
transition on AND to state [112]

-------------------
lalr_state [108]: {
  [logical_or_expression ::= logical_or_expression (*) OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= logical_or_expression (*) , {COMMA SEMICOLON RBRACE }]
}
transition on OR to state [110]

-------------------
lalr_state [109]: {
  [initialization ::= ASSIGN initializer (*) , {SEMICOLON }]
}

-------------------
lalr_state [110]: {
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [logical_or_expression ::= logical_or_expression OR (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
}
transition on logical_and_expression to state [111]
transition on inclusive_or_expression to state [106]

-------------------
lalr_state [111]: {
  [logical_or_expression ::= logical_or_expression OR logical_and_expression (*) , {COMMA SEMICOLON RBRACE OR }]
  [logical_and_expression ::= logical_and_expression (*) AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
}
transition on AND to state [112]

-------------------
lalr_state [112]: {
  [logical_and_expression ::= logical_and_expression AND (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
}
transition on inclusive_or_expression to state [113]

-------------------
lalr_state [113]: {
  [logical_and_expression ::= logical_and_expression AND inclusive_or_expression (*) , {COMMA SEMICOLON RBRACE AND OR }]
}

-------------------
lalr_state [114]: {
  [initializer ::= LBRACE initializer_list (*) RBRACE , {COMMA SEMICOLON RBRACE }]
  [initializer_list ::= initializer_list (*) COMMA initializer , {COMMA RBRACE }]
}
transition on RBRACE to state [117]
transition on COMMA to state [116]

-------------------
lalr_state [115]: {
  [initializer_list ::= initializer (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [116]: {
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer ::= (*) LBRACE initializer_list RBRACE , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA RBRACE OR }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA RBRACE }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA RBRACE AND OR }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA RBRACE }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [initializer_list ::= initializer_list COMMA (*) initializer , {COMMA RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA RBRACE AND OR }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [initializer ::= (*) assignment_expression , {COMMA RBRACE }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA RBRACE }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA RBRACE OR }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA RBRACE }]
}
transition on initializer to state [118]
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LBRACE to state [105]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [103]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [117]: {
  [initializer ::= LBRACE initializer_list RBRACE (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [118]: {
  [initializer_list ::= initializer_list COMMA initializer (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [119]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= unary_expression MULASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [140]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [120]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= unary_expression BWISEANDASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [139]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [121]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= unary_expression BWISEORASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [138]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [122]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= unary_expression SUBASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [137]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [123]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= unary_expression LSHIFTASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [136]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [124]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= unary_expression ADDASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [135]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [125]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= unary_expression BWISEXORASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [134]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [126]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= unary_expression ASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [133]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [127]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= unary_expression RSHIFTASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [132]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [128]: {
  [assignment_expression ::= unary_expression DIVASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [131]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [129]: {
  [logical_or_expression ::= (*) logical_or_expression OR logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression DIVASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) LPAREN expression RPAREN , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEXORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [Var ::= (*) ID , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [postfix_expression ::= (*) postfix_expression ARROW Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) MINUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) logical_and_expression AND inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= (*) unary_expression ADDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEANDASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression DECREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) DECREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [assignment_expression ::= (*) logical_or_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression MULASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) primary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression LSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) postfix_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) TILDE cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_or_expression ::= (*) logical_and_expression , {COMMA SEMICOLON RBRACE OR }]
  [assignment_expression ::= (*) unary_expression SUBASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) DECIMAL_LITERAL , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression BWISEORASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression PERIOD Var , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [unary_expression ::= (*) PLUS cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [logical_and_expression ::= (*) inclusive_or_expression , {COMMA SEMICOLON RBRACE AND OR }]
  [assignment_expression ::= unary_expression MODASSIGN (*) assignment_expression , {COMMA SEMICOLON RBRACE }]
  [assignment_expression ::= (*) unary_expression ASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [primary_expression ::= (*) error , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression MODASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [postfix_expression ::= (*) postfix_expression INCREMENT , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [assignment_expression ::= (*) unary_expression RSHIFTASSIGN assignment_expression , {COMMA SEMICOLON RBRACE }]
  [unary_expression ::= (*) INCREMENT unary_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
  [unary_expression ::= (*) NOT cast_expression , {ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}
transition on logical_or_expression to state [108]
transition on error to state [28]
transition on MINUS to state [25]
transition on INCREMENT to state [23]
transition on logical_and_expression to state [107]
transition on inclusive_or_expression to state [106]
transition on postfix_expression to state [18]
transition on TILDE to state [16]
transition on ID to state [14]
transition on LPAREN to state [13]
transition on unary_expression to state [104]
transition on DECREMENT to state [10]
transition on NOT to state [11]
transition on DECIMAL_LITERAL to state [9]
transition on Var to state [8]
transition on assignment_expression to state [130]
transition on PLUS to state [6]
transition on primary_expression to state [4]

-------------------
lalr_state [130]: {
  [assignment_expression ::= unary_expression MODASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [131]: {
  [assignment_expression ::= unary_expression DIVASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [132]: {
  [assignment_expression ::= unary_expression RSHIFTASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [133]: {
  [assignment_expression ::= unary_expression ASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [134]: {
  [assignment_expression ::= unary_expression BWISEXORASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [135]: {
  [assignment_expression ::= unary_expression ADDASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [136]: {
  [assignment_expression ::= unary_expression LSHIFTASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [137]: {
  [assignment_expression ::= unary_expression SUBASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [138]: {
  [assignment_expression ::= unary_expression BWISEORASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [139]: {
  [assignment_expression ::= unary_expression BWISEANDASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [140]: {
  [assignment_expression ::= unary_expression MULASSIGN assignment_expression (*) , {COMMA SEMICOLON RBRACE }]
}

-------------------
lalr_state [141]: {
  [declaration ::= VAR bitfield_list type name initialization SEMICOLON (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [142]: {
  [declaration ::= ENUM ID (*) LBRACE enumerator_list RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on LBRACE to state [143]

-------------------
lalr_state [143]: {
  [enumerator ::= (*) ID , {COMMA RBRACE }]
  [declaration ::= ENUM ID LBRACE (*) enumerator_list RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [enumerator_list ::= (*) enumerator_list COMMA enumerator , {COMMA RBRACE }]
  [enumerator ::= (*) ID ASSIGN constant_expression , {COMMA RBRACE }]
  [enumerator_list ::= (*) enumerator , {COMMA RBRACE }]
}
transition on enumerator to state [146]
transition on enumerator_list to state [145]
transition on ID to state [144]

-------------------
lalr_state [144]: {
  [enumerator ::= ID (*) , {COMMA RBRACE }]
  [enumerator ::= ID (*) ASSIGN constant_expression , {COMMA RBRACE }]
}
transition on ASSIGN to state [150]

-------------------
lalr_state [145]: {
  [declaration ::= ENUM ID LBRACE enumerator_list (*) RBRACE , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [enumerator_list ::= enumerator_list (*) COMMA enumerator , {COMMA RBRACE }]
}
transition on RBRACE to state [148]
transition on COMMA to state [147]

-------------------
lalr_state [146]: {
  [enumerator_list ::= enumerator (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [147]: {
  [enumerator ::= (*) ID , {COMMA RBRACE }]
  [enumerator_list ::= enumerator_list COMMA (*) enumerator , {COMMA RBRACE }]
  [enumerator ::= (*) ID ASSIGN constant_expression , {COMMA RBRACE }]
}
transition on enumerator to state [149]
transition on ID to state [144]

-------------------
lalr_state [148]: {
  [declaration ::= ENUM ID LBRACE enumerator_list RBRACE (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [149]: {
  [enumerator_list ::= enumerator_list COMMA enumerator (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [150]: {
  [enumerator ::= ID ASSIGN (*) constant_expression , {COMMA RBRACE }]
}
transition on constant_expression to state [151]

-------------------
lalr_state [151]: {
  [enumerator ::= ID ASSIGN constant_expression (*) , {COMMA RBRACE }]
}

-------------------
lalr_state [152]: {
  [cast_expression ::= unary_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}

-------------------
lalr_state [153]: {
  [unary_expression ::= MINUS cast_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}

-------------------
lalr_state [154]: {
  [declaration ::= TYPEDEF type (*) name SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
  [name ::= (*) ID , {SEMICOLON }]
}
transition on name to state [155]
transition on ID to state [35]

-------------------
lalr_state [155]: {
  [declaration ::= TYPEDEF type name (*) SEMICOLON , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}
transition on SEMICOLON to state [156]

-------------------
lalr_state [156]: {
  [declaration ::= TYPEDEF type name SEMICOLON (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [157]: {
  [unary_expression ::= INCREMENT unary_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}

-------------------
lalr_state [158]: {
  [bitfield_list ::= bitfield_value bitfield_list (*) , {ID INT STRUCT DOUBLE UNION SHORT FLOAT VOID LONG ENUM CHAR }]
}

-------------------
lalr_state [159]: {
  [declaration_list ::= declaration_list statementordecloration_list (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [160]: {
  [$START ::= declaration_list EOF (*) , {EOF }]
}

-------------------
lalr_state [161]: {
  [postfix_expression ::= postfix_expression DECREMENT (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [162]: {
  [postfix_expression ::= postfix_expression INCREMENT (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [163]: {
  [postfix_expression ::= postfix_expression ARROW (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}
transition on Var to state [166]
transition on ID to state [14]

-------------------
lalr_state [164]: {
  [postfix_expression ::= postfix_expression PERIOD (*) Var , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
  [Var ::= (*) ID , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}
transition on Var to state [165]
transition on ID to state [14]

-------------------
lalr_state [165]: {
  [postfix_expression ::= postfix_expression PERIOD Var (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [166]: {
  [postfix_expression ::= postfix_expression ARROW Var (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [167]: {
  [unary_expression ::= TILDE cast_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}

-------------------
lalr_state [168]: {
  [primary_expression ::= LPAREN expression (*) RPAREN , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}
transition on RPAREN to state [169]

-------------------
lalr_state [169]: {
  [primary_expression ::= LPAREN expression RPAREN (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN ARROW SUBASSIGN DECREMENT ADDASSIGN INCREMENT MULASSIGN BWISEANDASSIGN MODASSIGN PERIOD }]
}

-------------------
lalr_state [170]: {
  [expression_statement ::= unary_expression SEMICOLON (*) , {EOF error ID DECIMAL_LITERAL SEMICOLON LPAREN PLUS MINUS FUN VAR VOLATILE NOT REGISTER TYPEDEF STATIC EXTERN CONST ENUM AUTO DECREMENT INCREMENT TILDE }]
}

-------------------
lalr_state [171]: {
  [unary_expression ::= NOT cast_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}

-------------------
lalr_state [172]: {
  [unary_expression ::= DECREMENT unary_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}

-------------------
lalr_state [173]: {
  [unary_expression ::= PLUS cast_expression (*) , {SEMICOLON ASSIGN RSHIFTASSIGN LSHIFTASSIGN BWISEORASSIGN BWISEXORASSIGN DIVASSIGN SUBASSIGN ADDASSIGN MULASSIGN BWISEANDASSIGN MODASSIGN }]
}

-------------------
Closing files...
------- CUP v0.10g Parser Generation Summary -------
  0 errors and 41 warnings
  80 terminals, 49 non terminals, and 125 productions declared, 
  producing 174 unique parse states.
  16 terminals declared but not used.
  0 non terminals declared but not used.
  0 productions never reduced.
  0 conflicts detected (3 expected).
  Code written to "Grm.java", and "sym.java".
---------------------------------------------------- (v0.10g)
