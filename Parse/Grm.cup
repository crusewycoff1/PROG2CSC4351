package Parse;
import java.util.ArrayList;
import Symbol.Symbol;

action code {:
    static Symbol sym(String s) {
	         return Symbol.symbol(s);
	        }
	    :};

parser code  {: 
  Lexer lexer;

  public void syntax_error(java_cup.runtime.Symbol current) {
   report_error("Syntax error (" + current.sym + ")", current);
  }

  ErrorMsg.ErrorMsg errorMsg;

  public void report_error(String message, java_cup.runtime.Symbol info) {
      errorMsg.error(info.left, message);
  }

  public Grm(Lexer l, ErrorMsg.ErrorMsg err) {
    this();
    errorMsg=err;
    lexer=l;
  }
:};

scan with {: return lexer.nextToken(); :};

terminal String ID, STRING_LITERAL;
terminal Integer DECIMAL_LITERAL;
terminal char CHAR_LITERAL;
terminal INT, COMMA, COLON, SEMICOLON, LPAREN, RPAREN, LBRACK, RBRACK, LBRACE, RBRACE, PLUS, MINUS, 
TIMES, DIVIDE, EQ, NEQ, LT, LE, GT, GE, AND, OR, ASSIGN, IF, ELSE, WHILE, FOR, DO, BREAK, FUN, VAR, 
VOLATILE, NOT, REGISTER, CONTINUE, TYPEDEF, STRUCT, STATIC, SIZEOF, RETURN, EXTERN, DOUBLE, UNION, 
SHORT, FLOAT, CONST, VOID, LONG, GOTO, ENUM, CHAR, AUTO, RSHIFTASSIGN, LSHIFTASSIGN, ELIPSES, 
BWISEORASSIGN, BWISEXORASSIGN, RSHIFT, LSHIFT, DIVASSIGN, ARROW, SUBASSIGN, DECREMENT, ADDASSIGN, 
INCREMENT, MULASSIGN, BWISEANDASSIGN, MODASSIGN, TILDE, BWISEOR, BWISEXOR, PERIOD, BITWISEAND, MODULUS;

non terminal Absyn.Exp          primary_expression, assignment_expression, postfix_expression,
cast_expression, unary_expression, multiplicative_expression, additive_expression, shift_expression,
relational_expression, equality_expression, and_expression, exclusive_or_expression,
inclusive_or_expression, logical_and_expression, logical_or_expression, expression,
conditional_expression, constant_expression, initializer, initialization, enumerator;

non terminal Absyn.Var          Var, name;
non terminal Absyn.Statement          statement, compound_statement, labeled_statement,
expression_statement, selection_statement, iteration_statement, jump_statement;
non terminal Absyn.StmtList    statement_list;
non terminal Absyn.DecList   declaration_list;
non terminal Absyn.NameTy type_name, type;
non terminal Absyn.FieldList parameters, parameter_list, type_parameters,
parameter_type_list, struct_or_union_declarator, struct_declaration_list;
non terminal Absyn.Dec  declaration;
non terminal Absyn.EnumeratorList enumerator_list;
non terminal Absyn.ArgExpList argument_expression_list;

non terminal  expression_array_type, bitfield_list,
bitfield_value, empty_array_type_list,
empty_array_type, expression_array_type_list, type_augments, brackets_list, pointer_list,
struct_or_union, initializer_list;


start with declaration_list;

declaration_list ::= declaration_list:e declaration:e2
                    {:RESULT = new Absyn.DecList(e2, e);:}
                  | declaration:e
                    {:RESULT = new Absyn.DecList(e, null);:}
                  ;


declaration ::= VAR bitfield_list type:t name:n initialization:e SEMICOLON
                {:RESULT = new Absyn.VarDec(0, n, t, e);:}
              | FUN bitfield_list type:t name:n parameters:p compound_statement:s
                {:RESULT = new Absyn.FunctionDec(0, n, p, t, s);:}
              | FUN bitfield_list type:t name:n type_parameters:p SEMICOLON
                {:RESULT = new Absyn.FunctionDec(0, n, p, t, null);:}
              | TYPEDEF type:t name:n
                {:RESULT = new Absyn.FieldVar(0, t, n);:}
              | bitfield_list struct_or_union name:n struct_or_union_declarator:sl
                {:RESULT = new Absyn.StructList(0, n, sl);:}
              | ENUM ID LBRACE enumerator_list:el RBRACE
                {:RESULT = el;:}
              ;

name ::= Var:v
      {:RESULT = v;:}
  ;

bitfield_list ::=
        | bitfield_value:b bitfield_list:l
        ;

bitfield_value ::= CONST
                 | VOLATILE
                 | EXTERN
                 | STATIC
                 | AUTO
                 | REGISTER
                 ;

empty_array_type_list ::= empty_array_type
                        | empty_array_type_list empty_array_type
                        ;

empty_array_type ::= LBRACK RBRACK;

expression_array_type_list ::= expression_array_type
                             | expression_array_type_list expression_array_type
                             ;

expression_array_type ::= LBRACK constant_expression RBRACK;

type ::= type_name:t type_augments
          {:RESULT = t;:}
       | type_name:t
          {:RESULT = t;:}
       ;

type_augments ::= pointer_list
                | brackets_list
                | pointer_list brackets_list
                ;

brackets_list ::= empty_array_type_list
                | expression_array_type_list
                ;

pointer_list ::= TIMES
               | pointer_list TIMES
               ;

type_name ::= VOID
            | CHAR
            | SHORT
            | INT
            | LONG
            | FLOAT
            | DOUBLE
            | ENUM ID
            | ID
            ;

initialization ::=
                  | ASSIGN initializer:i
                      {:RESULT = i;:}
                  ;

struct_or_union_declarator ::= LBRACE struct_declaration_list:ls RBRACE
                                {:RESULT = ls;:}
;

enumerator_list ::= enumerator:e
                    {:RESULT = new Absyn.EnumeratorList(0, e, null);:}
                  | enumerator_list:el COMMA enumerator:e
                    {:RESULT = new Absyn.EnumeratorList(0, e, el);:}
                  ;

enumerator ::= ID
              {:RESULT = null;:}
             | ID ASSIGN constant_expression:e
              {:RESULT = e;:}
             ;

struct_declaration_list ::= type:t name:n SEMICOLON
                              {:RESULT = new Absyn.FieldList(0, t, n, null);:}
                          | struct_declaration_list:sl type:t name:n SEMICOLON
                              {:RESULT = new Absyn.FieldList(0, t, n, sl);:}
                          ;

struct_or_union ::= STRUCT
                  | UNION
                  ;

type_parameters ::= LPAREN parameter_type_list:pl RPAREN
                    {:RESULT = pl;:}
                   | LPAREN parameter_type_list:pl COMMA ELIPSES RPAREN
                    {:RESULT = pl;:}
                   | LPAREN RPAREN
                   ;

parameters ::= LPAREN parameter_list:p RPAREN
                {:RESULT = p;:}
            | LPAREN parameter_list:p COMMA ELIPSES RPAREN
                {:RESULT = p;:}
            | LPAREN RPAREN
            ;

parameter_list ::= type:t name:n
                    {:RESULT = new Absyn.FieldList(0, t, n, null);:}
                 | parameter_list:p COMMA type:t name:n
                    {:RESULT = new Absyn.FieldList(0, t, n, p);:}
                 ;

parameter_type_list ::= type:t
                        {:RESULT = new Absyn.FieldList(0, t, null, null);:}
                      | parameter_type_list:pl COMMA type:t
                        {:RESULT = new Absyn.FieldList(0, t, null, pl);:}
                      ;

initializer_list ::= initializer
                   | initializer_list COMMA initializer
                   ;

initializer ::= assignment_expression:e
                {:RESULT = e;:}
              | LBRACE initializer_list RBRACE
              ;


primary_expression ::= error:e
	  {: RESULT = new Absyn.SeqExp(0, null); :}
	| Var:v
	  {: RESULT = new Absyn.VarExp(0, v); :}
  | DECIMAL_LITERAL:e
    {:RESULT = new Absyn.IntExp(0, e.intValue()); :}
  | LPAREN expression:e RPAREN
    {: RESULT = e; :}
  ;

postfix_expression ::= primary_expression:e
  {:RESULT = e;:}
  | postfix_expression:e1 LBRACK expression:e2 RBRACK
    {: RESULT = new Absyn.PostfixExp(0, e1, e2); :}
  | postfix_expression:e1 LPAREN argument_expression_list:e2 RPAREN
    {: RESULT = new Absyn.PostfixExpLs(0,e1,e2); :}
  | postfix_expression:e LPAREN RPAREN
    {: RESULT = new Absyn.PostfixExp(0, e, null);:}
  | postfix_expression:e INCREMENT
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.INCREMENT, e, false);:}
  | postfix_expression:e DECREMENT
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.DECREMENT, e, false);:}
  | postfix_expression:e PERIOD Var:v
    {:RESULT = new Absyn.StructExp(0, v, e, false); :}
  | postfix_expression:e ARROW Var:v
    {:RESULT = new Absyn.StructExp(0, v, e, true); :}
  ;

argument_expression_list ::= assignment_expression:e
      {:RESULT = new Absyn.ArgExpList(0, e, null);:}
    | argument_expression_list:al COMMA assignment_expression:e
      {:RESULT = new Absyn.ArgExpList(0, e, al);:}
    ;

unary_expression ::= postfix_expression:e
{:RESULT = e;:}
  | INCREMENT unary_expression:e
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.INCREMENT, e, true);:}
  | DECREMENT unary_expression:e
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.DECREMENT, e, true);:}
  | PLUS cast_expression:e
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.PLUS, e, true);:}
  | MINUS cast_expression:e
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.MINUS, e, true);:}
  | TILDE cast_expression:e
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.TILDE, e, true);:}
  | NOT cast_expression:e
    {:RESULT = new Absyn.UnaryExp(0, Absyn.UnaryExp.NOT, e, true);:}
  | SIZEOF LPAREN type_name:t RPAREN
    {:RESULT = new Absyn.SizeOfExp(0, t);:}
  ;

cast_expression ::= unary_expression:e {:RESULT = e;:} ;

multiplicative_expression ::= cast_expression:e
  {:RESULT = e;:}
  | multiplicative_expression:e1 TIMES cast_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.MUL, e2); :}
  | multiplicative_expression:e1 DIVIDE cast_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.DIV, e2); :}
  | multiplicative_expression:e1 MODULUS cast_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.MOD, e2); :}
  ;

additive_expression ::= multiplicative_expression:e
                          {:RESULT = e;:}
  | additive_expression:e1 PLUS multiplicative_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.PLUS, e2); :}
  | additive_expression:e1 MINUS multiplicative_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.MINUS, e2); :}
  ;

shift_expression ::= additive_expression:e
{:RESULT = e;:}
  | shift_expression:e1 RSHIFT additive_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.RSHIFT, e2); :}
  | shift_expression:e1 LSHIFT additive_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.LSHIFT, e2); :}
  ;

relational_expression ::= shift_expression:e
{:RESULT = e;:}
  | relational_expression:e1 GE shift_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.GE, e2); :}
  | relational_expression:e1 GT shift_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.GT, e2); :}
  | relational_expression:e1 LE shift_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.LE, e2); :}
  | relational_expression:e1 LT shift_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.LT, e2); :}
  ;

equality_expression ::= relational_expression:e
{:RESULT = e;:}
  | equality_expression:e1 EQ relational_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.EQ, e2); :}
  | equality_expression:e1 NEQ relational_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.NE, e2); :}
  ;

and_expression ::= equality_expression:e
{:RESULT = e;:}
  | and_expression:e1 BITWISEAND equality_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.BITWISEAND, e2); :}
    ;

exclusive_or_expression ::= and_expression:e
{:RESULT = e;:}
                          | and_expression:e1 BWISEXOR equality_expression:e2
                            {:RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.BITWISEXOR, e2);:}
                          ;

inclusive_or_expression ::= exclusive_or_expression:e
{:RESULT = e;:}
                          | inclusive_or_expression:e1 BWISEOR exclusive_or_expression:e2
                            {:RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.BITWISEOR, e2);:}
                          ;

logical_and_expression ::= inclusive_or_expression:e
{:RESULT = e;:}
  | logical_and_expression:e1 AND inclusive_or_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.AND, e2); :}
  ;

logical_or_expression ::= logical_and_expression:e
{:RESULT = e;:}
  | logical_or_expression:e1 OR logical_and_expression:e2
    {: RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.OR, e2); :}
  ;

conditional_expression ::= logical_or_expression:e
                            {:RESULT = e;:}
                            ;

constant_expression ::= conditional_expression:e
                        {:RESULT = e;:}
                        ;

assignment_expression ::= conditional_expression:e
{:RESULT = e;:}
  | unary_expression:v ASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.ASSIGN, e2);:}
  | unary_expression:v ADDASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.ADDASSIGN, e2); :}
  | unary_expression:v SUBASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.SUBASSIGN, e2); :}
  | unary_expression:v DIVASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.DIVASSIGN, e2); :}
  | unary_expression:v MULASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.MULASSIGN, e2); :}
  | unary_expression:v MODASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.MODASSIGN, e2); :}
  | unary_expression:v BWISEANDASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.BWISEANDASSIGN, e2); :}
  | unary_expression:v BWISEORASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.BWISEORASSIGN, e2); :}
  | unary_expression:v BWISEXORASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.BWISEXORASSIGN, e2); :}
  | unary_expression:v LSHIFTASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.LSHIFTASSIGN, e2); :}
  | unary_expression:v RSHIFTASSIGN assignment_expression:e2
    {: RESULT = new Absyn.AssignExp(0, v, Absyn.AssignExp.RSHIFTASSIGN, e2); :}
  ;


expression ::= assignment_expression:e
{:RESULT = e;:}
                | expression:e1 COMMA assignment_expression:e2
                  {:RESULT = new Absyn.OpExp(0, e1, Absyn.OpExp.COMMA, e2); :}
                ;


Var ::= ID:n
	  {: RESULT = new Absyn.SimpleVar(0, sym(n)); :}
	;

statement ::= labeled_statement:s
              {:RESULT = s;:}
              | compound_statement:s
              {:RESULT = s;:}
              | expression_statement:s
              {:RESULT = s;:}
              | selection_statement:s
              {:RESULT = s;:}
              | iteration_statement:s
              {:RESULT = s;:}
              | jump_statement:s
              {:RESULT = s;:}
              ;

labeled_statement ::= Var:v COLON statement:s
  {: RESULT =  new Absyn.LabeledStmt(0, v, s); :}
  ;

compound_statement ::= LBRACE declaration_list:d statement_list:s RBRACE
  {: RESULT = new Absyn.CompoundStmt(0, d, s); :}
  | LBRACE statement_list:s RBRACE
  {: RESULT = new Absyn.CompoundStmt(0, null, s); :}
  | LBRACE declaration_list:d RBRACE
  {: RESULT = new Absyn.CompoundStmt(0, d, null); :}
  | LBRACE RBRACE
  ;

statement_list ::= statement:s
            {: RESULT = new Absyn.StmtList(0, s, null); :}
            | statement_list:l statement:s
            {: RESULT = new Absyn.StmtList(0, s, l); :}
            ;

expression_statement ::= expression:e SEMICOLON
            {: RESULT = new Absyn.ExpressionStmt(0, e); :}
            | SEMICOLON
            ;

selection_statement ::= IF LPAREN expression:e RPAREN statement:s
            {: RESULT = new Absyn.SelectionStmt(0, e, s, null); :}
            | IF LPAREN expression:e RPAREN statement:s1 ELSE statement:s2
            {: RESULT = new Absyn.SelectionStmt(0, e, s1, s2); :}
            ;

iteration_statement ::= WHILE LPAREN expression:e RPAREN statement:s
                    {: RESULT = new Absyn.WhileStmt(0, e, s); :}
                    | DO statement:s WHILE LPAREN expression:e RPAREN SEMICOLON
                    {: RESULT = new Absyn.DoWhileStmt(0, s, e); :}
                    | FOR LPAREN expression:e1 SEMICOLON expression:e2 SEMICOLON expression:e3 RPAREN statement:s
                    {: RESULT = new Absyn.ForStmt(0, e1, e2, e3, s, true, true, true); :}
                    | FOR LPAREN expression:e1 SEMICOLON expression:e2 SEMICOLON RPAREN statement:s
                    {: RESULT = new Absyn.ForStmt(0, e1, e2, null, s, true, true, false); :}
                    | FOR LPAREN SEMICOLON expression:e SEMICOLON RPAREN statement:s
                    {: RESULT = new Absyn.ForStmt(0, null, e, null, s, false, true, false); :}
                    | FOR LPAREN SEMICOLON SEMICOLON RPAREN statement:s
                    {: RESULT = new Absyn.ForStmt(0, null, null, null, s, false, false, false); :}
                    | FOR LPAREN expression:e1 SEMICOLON SEMICOLON expression:e2 RPAREN statement:s
                    {: RESULT = new Absyn.ForStmt(0, e1, null, e2, s, true, false, true); :}
                    | FOR LPAREN SEMICOLON expression:e1 SEMICOLON expression:e2 RPAREN statement:s
                    {: RESULT = new Absyn.ForStmt(0, null, e1, e2, s, false, true, true); :}
                    ;

jump_statement ::= GOTO Var:v SEMICOLON
                  {: RESULT = new Absyn.JumpStmt(0, v, false, false, false, true); :}
                  | CONTINUE SEMICOLON
                  {: RESULT = new Absyn.JumpStmt(0, false, false, true, false); :}
                  | BREAK SEMICOLON
                  {: RESULT = new Absyn.JumpStmt(0, false, true, false, false); :}
                  | RETURN expression:e SEMICOLON
                  {: RESULT = new Absyn.JumpStmt(0, e, true, false, false, false); :}
                  | RETURN SEMICOLON
                  {: RESULT = new Absyn.JumpStmt(0, true, false, false, false); :}
                  ;


